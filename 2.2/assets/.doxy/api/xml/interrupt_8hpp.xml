<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="interrupt_8hpp" kind="file" language="C++">
    <compoundname>interrupt.hpp</compoundname>
    <includes local="no">array</includes>
    <includes local="no">span</includes>
    <includes local="no">utility</includes>
    <includes refid="error_8hpp" local="no">libhal/error.hpp</includes>
    <incdepgraph>
      <node id="7">
        <label>system_error</label>
      </node>
      <node id="1">
        <label>libraries/include/libhal-armcortex/interrupt.hpp</label>
        <link refid="interrupt_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>boost/leaf.hpp</label>
      </node>
      <node id="4">
        <label>utility</label>
      </node>
      <node id="2">
        <label>array</label>
      </node>
      <node id="5">
        <label>libhal/error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>span</label>
      </node>
    </incdepgraph>
    <innerclass refid="classhal_1_1cortex__m_1_1interrupt" prot="public">hal::cortex_m::interrupt</innerclass>
    <innerclass refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number" prot="public">hal::cortex_m::interrupt::exception_number</innerclass>
    <innernamespace refid="namespacehal">hal</innernamespace>
    <innernamespace refid="namespacehal_1_1cortex__m">hal::cortex_m</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2023<sp/>Google<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;span&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libhal/error.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hal::cortex_m<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="keyword">using</highlight><highlight class="normal"><sp/>interrupt_pointer<sp/>=<sp/>void<sp/>(*)();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="classhal_1_1cortex__m_1_1interrupt" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhal_1_1cortex__m_1_1interrupt" kindref="compound">interrupt</ref></highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35" refid="classhal_1_1cortex__m_1_1interrupt_1a1a83927d27902c18f5e45dfb0d957dfb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1a1a83927d27902c18f5e45dfb0d957dfb" kindref="member">core_interrupts</ref><sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number" kindref="compound">exception_number</ref></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52" refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a5133b258b38fe723f6a40aaaad41f641" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a5133b258b38fe723f6a40aaaad41f641" kindref="member">exception_number</ref>(std::uint16_t<sp/>p_id)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_id(p_id)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a5133b258b38fe723f6a40aaaad41f641" kindref="member">exception_number</ref>(<ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number" kindref="compound">exception_number</ref>&amp;<sp/>p_id)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number" kindref="compound">exception_number</ref>&amp;<sp/>operator=(<ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number" kindref="compound">exception_number</ref>&amp;<sp/>p_id)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a2d19aa1cf7edb91bdc7a8d16b2a5b2d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>uint32_t<sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a2d19aa1cf7edb91bdc7a8d16b2a5b2d4" kindref="member">index_position</ref><sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1acb93f52a6f6e478f76accd06fb20a6f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>uint32_t<sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1acb93f52a6f6e478f76accd06fb20a6f9" kindref="member">enable_mask_code</ref><sp/>=<sp/>0x1F;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a2c1a386b8b6c56233e42c1a25c2bec8b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a2c1a386b8b6c56233e42c1a25c2bec8b" kindref="member">default_enabled</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="81"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_id<sp/>&lt;<sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1a1a83927d27902c18f5e45dfb0d957dfb" kindref="member">core_interrupts</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>std::uint32_t<sp/>to_irq_number()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="86"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_id<sp/>-<sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1a1a83927d27902c18f5e45dfb0d957dfb" kindref="member">core_interrupts</ref>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1afc52160c2f7590fc4794a570927704f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>std::uint32_t<sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1afc52160c2f7590fc4794a570927704f3" kindref="member">register_index</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="98"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to_irq_number()<sp/>&gt;&gt;<sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a2d19aa1cf7edb91bdc7a8d16b2a5b2d4" kindref="member">index_position</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1ab578110f924967ae33f22cbde05074c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>std::uint32_t<sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1ab578110f924967ae33f22cbde05074c9" kindref="member">enable_mask</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="109"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1U<sp/>&lt;&lt;<sp/>(to_irq_number()<sp/>&amp;<sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1acb93f52a6f6e478f76accd06fb20a6f9" kindref="member">enable_mask_code</ref>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a7c479095d277bf828a04e8be88f3a5d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a7c479095d277bf828a04e8be88f3a5d9" kindref="member">vector_index</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="119"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_id;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a1426aeeb60a194921dc9f1450e7f581d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a1426aeeb60a194921dc9f1450e7f581d" kindref="member">is_valid</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="131"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_id<sp/>&lt;<sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1a9009384257f7bda0802c476b9fce78f4" kindref="member">get_vector_table</ref>().size();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a0ac09662e4a28fad8d7b7a97ad3a1d0f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>std::uint16_t<sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a0ac09662e4a28fad8d7b7a97ad3a1d0f" kindref="member">get_event_number</ref>()</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_id;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint16_t<sp/>m_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="classhal_1_1cortex__m_1_1interrupt_1ab9f7c5585a2b28e04cf5aae53a07c961" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1ab9f7c5585a2b28e04cf5aae53a07c961" kindref="member">nop</ref>();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>VectorCount&gt;</highlight></codeline>
<codeline lineno="175" refid="classhal_1_1cortex__m_1_1interrupt_1a2bb148e9f62ee19f5de67fb10efa1492" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1a2bb148e9f62ee19f5de67fb10efa1492" kindref="member">initialize</ref>()</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Statically<sp/>allocate<sp/>a<sp/>buffer<sp/>of<sp/>vectors<sp/>to<sp/>be<sp/>used<sp/>as<sp/>the<sp/>new<sp/>IVT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>total_vector_count<sp/>=<sp/>VectorCount<sp/>+<sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1a1a83927d27902c18f5e45dfb0d957dfb" kindref="member">core_interrupts</ref>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">alignas</highlight><highlight class="normal">(512)<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::array&lt;interrupt_pointer,<sp/>total_vector_count&gt;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector_buffer{};</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>setup(vector_buffer);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>VectorCount&gt;</highlight></codeline>
<codeline lineno="194" refid="classhal_1_1cortex__m_1_1interrupt_1ad8162f55a4b3291d6b4d166bddcc9b3f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1ad8162f55a4b3291d6b4d166bddcc9b3f" kindref="member">reinitialize</ref>()</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>reset();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>initialize&lt;VectorCount&gt;();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="classhal_1_1cortex__m_1_1interrupt_1a9009384257f7bda0802c476b9fce78f4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::span&lt;interrupt_pointer&gt;<sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1a9009384257f7bda0802c476b9fce78f4" kindref="member">get_vector_table</ref>();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>disable_interrupts();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>enable_interrupts();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="classhal_1_1cortex__m_1_1interrupt_1a045c9af5b95f2af7d38f40e9b37126fe" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1a045c9af5b95f2af7d38f40e9b37126fe" kindref="member">interrupt</ref>(<ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number" kindref="compound">exception_number</ref><sp/>p_id);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="classhal_1_1cortex__m_1_1interrupt_1a2ef9a13db819236f2c5325fd872daa6f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1a2ef9a13db819236f2c5325fd872daa6f" kindref="member">enable</ref>(interrupt_pointer<sp/>p_handler);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="classhal_1_1cortex__m_1_1interrupt_1ac07a42c480932acb60897e7fc832eb2d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1ac07a42c480932acb60897e7fc832eb2d" kindref="member">disable</ref>();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="classhal_1_1cortex__m_1_1interrupt_1ac0fbc2f57be172ebb45b1cb3b088b0b4" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1ac0fbc2f57be172ebb45b1cb3b088b0b4" kindref="member">verify_vector_enabled</ref>(interrupt_pointer<sp/>p_handler);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setup(std::span&lt;interrupt_pointer&gt;<sp/>p_vector_table);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number" kindref="compound">exception_number</ref><sp/>m_id;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">};</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hal::cortex_m</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="libraries/include/libhal-armcortex/interrupt.hpp"/>
  </compounddef>
</doxygen>
