<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="libhal-util_2spi_8hpp" kind="file" language="C++">
    <compoundname>spi.hpp</compoundname>
    <includes local="no">span</includes>
    <includes refid="error_8hpp" local="no">libhal/error.hpp</includes>
    <includes refid="libhal_2spi_8hpp" local="no">libhal/spi.hpp</includes>
    <includes refid="libhal_2units_8hpp" local="no">libhal/units.hpp</includes>
    <incdepgraph>
      <node id="4">
        <label>system_error</label>
      </node>
      <node id="8">
        <label>cstdint</label>
      </node>
      <node id="5">
        <label>boost/leaf/detail/all.hpp</label>
      </node>
      <node id="9">
        <label>units.hpp</label>
        <link refid="libhal_2units_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>libhal/error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cstddef</label>
      </node>
      <node id="10">
        <label>chrono</label>
      </node>
      <node id="6">
        <label>libhal/spi.hpp</label>
        <link refid="libhal_2spi_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>span</label>
      </node>
      <node id="1">
        <label>libraries/include/libhal-util/spi.hpp</label>
        <link refid="libhal-util_2spi_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacehal">hal</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2023<sp/>Google<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;span&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libhal/error.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libhal/spi.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libhal/units.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehal" kindref="compound">hal</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>spi::settings&amp;<sp/>p_lhs,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>spi::settings&amp;<sp/>p_rhs)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_lhs.clock_idles_high<sp/>==<sp/>p_rhs.clock_idles_high<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_lhs.clock_rate<sp/>==<sp/>p_rhs.clock_rate<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_lhs.data_valid_on_trailing_edge<sp/>==<sp/>p_rhs.data_valid_on_trailing_edge;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="namespacehal_1aee0b6c2757f5d1ea5f69e2bb561907a9" refkind="member"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>result&lt;hal::spi::transfer_t&gt;<sp/><ref refid="namespacehal_1a589504d8349443cb5a9ed2caa02dcbe1" kindref="member">write</ref>(</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1spi" kindref="compound">spi</ref>&amp;<sp/>p_spi,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>std::span&lt;const<sp/>hal::byte&gt;<sp/>p_data_out)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_spi.<ref refid="classhal_1_1spi_1a5e2b7807bafc0c93666977021c5c280b" kindref="member">transfer</ref>(</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>p_data_out,<sp/>std::span&lt;hal::byte&gt;{},<sp/><ref refid="classhal_1_1spi_1a33e2442ae4061231938416efcf54b124" kindref="member">spi::default_filler</ref>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="namespacehal_1a0d2bc4df819798763859d28d408249d2" refkind="member"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>result&lt;hal::spi::transfer_t&gt;<sp/><ref refid="namespacehal_1a5164defc44fc09c44d77d1ff823998eb" kindref="member">read</ref>(</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1spi" kindref="compound">spi</ref>&amp;<sp/>p_spi,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>std::span&lt;hal::byte&gt;<sp/>p_data_in,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><ref refid="namespacehal_1aa21f8ca97410869aabb284a575b2021d" kindref="member">hal::byte</ref><sp/>p_filler<sp/>=<sp/><ref refid="classhal_1_1spi_1a33e2442ae4061231938416efcf54b124" kindref="member">spi::default_filler</ref>)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_spi.<ref refid="classhal_1_1spi_1a5e2b7807bafc0c93666977021c5c280b" kindref="member">transfer</ref>(std::span&lt;hal::byte&gt;{},<sp/>p_data_in,<sp/>p_filler);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>BytesToRead&gt;</highlight></codeline>
<codeline lineno="79" refid="namespacehal_1acc8121bd60d3a7f5cb1d0e607e6c7ed3" refkind="member"><highlight class="normal">[[nodiscard]]<sp/>result&lt;std::array&lt;hal::byte,<sp/>BytesToRead&gt;&gt;<sp/><ref refid="namespacehal_1a5164defc44fc09c44d77d1ff823998eb" kindref="member">read</ref>(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1spi" kindref="compound">spi</ref>&amp;<sp/>p_spi,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="namespacehal_1aa21f8ca97410869aabb284a575b2021d" kindref="member">hal::byte</ref><sp/>p_filler<sp/>=<sp/><ref refid="classhal_1_1spi_1a33e2442ae4061231938416efcf54b124" kindref="member">spi::default_filler</ref>)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>std::array&lt;hal::byte,<sp/>BytesToRead&gt;<sp/>buffer;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>HAL_CHECK(p_spi.<ref refid="classhal_1_1spi_1a5e2b7807bafc0c93666977021c5c280b" kindref="member">transfer</ref>(std::span&lt;hal::byte&gt;{},<sp/>buffer,<sp/>p_filler));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="namespacehal_1a93bebefd7137ca9b0780b88ac742fd5a" refkind="member"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>result&lt;hal::spi::transfer_t&gt;<sp/><ref refid="namespacehal_1a3120e8d9eff19d2010c7ffa47b739d59" kindref="member">write_then_read</ref>(</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1spi" kindref="compound">spi</ref>&amp;<sp/>p_spi,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>std::span&lt;const<sp/>hal::byte&gt;<sp/>p_data_out,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>std::span&lt;hal::byte&gt;<sp/>p_data_in,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="namespacehal_1aa21f8ca97410869aabb284a575b2021d" kindref="member">hal::byte</ref><sp/>p_filler<sp/>=<sp/><ref refid="classhal_1_1spi_1a33e2442ae4061231938416efcf54b124" kindref="member">spi::default_filler</ref>)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>HAL_CHECK(<ref refid="namespacehal_1a589504d8349443cb5a9ed2caa02dcbe1" kindref="member">write</ref>(p_spi,<sp/>p_data_out));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>HAL_CHECK(<ref refid="namespacehal_1a5164defc44fc09c44d77d1ff823998eb" kindref="member">read</ref>(p_spi,<sp/>p_data_in,<sp/>p_filler));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>BytesToRead&gt;</highlight></codeline>
<codeline lineno="131" refid="namespacehal_1a4631b0486d61f1ba6359d75563a8a82b" refkind="member"><highlight class="normal">[[nodiscard]]<sp/>result&lt;std::array&lt;hal::byte,<sp/>BytesToRead&gt;&gt;<sp/><ref refid="namespacehal_1a3120e8d9eff19d2010c7ffa47b739d59" kindref="member">write_then_read</ref>(</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1spi" kindref="compound">spi</ref>&amp;<sp/>p_spi,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>std::span&lt;const<sp/>hal::byte&gt;<sp/>p_data_out,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><ref refid="namespacehal_1aa21f8ca97410869aabb284a575b2021d" kindref="member">hal::byte</ref><sp/>p_filler<sp/>=<sp/><ref refid="classhal_1_1spi_1a33e2442ae4061231938416efcf54b124" kindref="member">spi::default_filler</ref>)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>HAL_CHECK(<ref refid="namespacehal_1a589504d8349443cb5a9ed2caa02dcbe1" kindref="member">write</ref>(p_spi,<sp/>p_data_out));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>read&lt;BytesToRead&gt;(p_spi,<sp/>p_filler);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hal</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="libraries/include/libhal-util/spi.hpp"/>
  </compounddef>
</doxygen>
