<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhal_1_1steady__clock" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>hal::steady_clock</compoundname>
    <derivedcompoundref refid="classhal_1_1cortex__m_1_1dwt__counter" prot="public" virt="non-virtual">hal::cortex_m::dwt_counter</derivedcompoundref>
    <derivedcompoundref refid="classhal_1_1inert__steady__clock" prot="public" virt="non-virtual">hal::inert_steady_clock</derivedcompoundref>
    <derivedcompoundref refid="structhal_1_1mock_1_1steady__clock" prot="public" virt="non-virtual">hal::mock::steady_clock</derivedcompoundref>
    <includes refid="libhal_2steady__clock_8hpp" local="no">steady_clock.hpp</includes>
    <innerclass refid="structhal_1_1steady__clock_1_1frequency__t" prot="public">hal::steady_clock::frequency_t</innerclass>
    <innerclass refid="structhal_1_1steady__clock_1_1uptime__t" prot="public">hal::steady_clock::uptime_t</innerclass>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhal_1_1steady__clock_1a2bb1983d9fa94b9fe5bdb8159de03220" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structhal_1_1steady__clock_1_1frequency__t" kindref="compound">frequency_t</ref></type>
        <definition>frequency_t hal::steady_clock::frequency</definition>
        <argsstring>()</argsstring>
        <name>frequency</name>
        <briefdescription>
<para>Get the operating frequency of the steady clock. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>result&lt;frequency_t&gt; - operating frequency of the steady clock. Guaranteed to be a positive value by the implementing driver. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/steady_clock.hpp" line="81" column="16" bodyfile="libraries/include/libhal/steady_clock.hpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1steady__clock_1ae36599416bdd64434e56b2ff6a2c2262" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structhal_1_1steady__clock_1_1uptime__t" kindref="compound">uptime_t</ref></type>
        <definition>uptime_t hal::steady_clock::uptime</definition>
        <argsstring>()</argsstring>
        <name>uptime</name>
        <briefdescription>
<para>Get the current value of the steady clock. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structhal_1_1steady__clock_1_1uptime__t" kindref="compound">uptime_t</ref> - uptime information </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/steady_clock.hpp" line="91" column="13" bodyfile="libraries/include/libhal/steady_clock.hpp" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1steady__clock_1a8c1bf5a5f874b6971cd84e213afe6818" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual hal::steady_clock::~steady_clock</definition>
        <argsstring>()=default</argsstring>
        <name>~steady_clock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/steady_clock.hpp" line="96" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhal_1_1steady__clock_1af69e8bc7e978529720cb18149241ba85" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="structhal_1_1steady__clock_1_1frequency__t" kindref="compound">frequency_t</ref></type>
        <definition>virtual frequency_t hal::steady_clock::driver_frequency</definition>
        <argsstring>()=0</argsstring>
        <name>driver_frequency</name>
        <reimplementedby refid="structhal_1_1mock_1_1steady__clock_1a8c94bd8e838f40f023d012f1b9da15c6">driver_frequency</reimplementedby>
        <reimplementedby refid="classhal_1_1inert__steady__clock_1a34538275c689754ba7fa830044b86f28">driver_frequency</reimplementedby>
        <reimplementedby refid="classhal_1_1cortex__m_1_1dwt__counter_1aac58843ac895e5330c92022d084923fd">driver_frequency</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/steady_clock.hpp" line="99" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1steady__clock_1aa15e00cbbe00e98015aa86dbe016f812" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="structhal_1_1steady__clock_1_1uptime__t" kindref="compound">uptime_t</ref></type>
        <definition>virtual uptime_t hal::steady_clock::driver_uptime</definition>
        <argsstring>()=0</argsstring>
        <name>driver_uptime</name>
        <reimplementedby refid="structhal_1_1mock_1_1steady__clock_1a01cb962481b947abfd9aa1b1a96fb7b6">driver_uptime</reimplementedby>
        <reimplementedby refid="classhal_1_1inert__steady__clock_1a26a6f7a94a6f303e06e7c42b7ca21a24">driver_uptime</reimplementedby>
        <reimplementedby refid="classhal_1_1cortex__m_1_1dwt__counter_1ad0f5cac11641929ad014f44fadddc101">driver_uptime</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/steady_clock.hpp" line="100" column="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware abstraction interface for a steady clock mechanism. </para>
    </briefdescription>
    <detaileddescription>
<para>Implementations of this interface must follow the same requirements as a std::chrono::steady_clock, in that the clock is monotonic &amp; steady. An additional requirement is added to ensure that the clock is reliable. Meaning calls to the interface functions do not return errors because this clock should be infallible. To ensure this, this clock should be driven by the platform&apos;s peripheral drivers or some other mechanism that is unlikely to go offline while the platform is in a normal operating state.</para>
<para>This clock is steady meaning that subsequent calls to get the uptime of this clock cannot decrease as physical time moves forward and the time between ticks of this clock are constant and defined by the clock&apos;s frequency.</para>
<para>This can be used to get the time since the boot up, or to be more accurate, the time when the steady clock object is created. This clock is most suitable for measuring time intervals.</para>
<para>After creation of this clock, the operating frequency shall not change. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>hal::cortex_m::dwt_counter</label>
        <link refid="classhal_1_1cortex__m_1_1dwt__counter"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>hal::inert_steady_clock</label>
        <link refid="classhal_1_1inert__steady__clock"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>hal::mock::steady_clock</label>
        <link refid="structhal_1_1mock_1_1steady__clock"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>hal::steady_clock</label>
        <link refid="classhal_1_1steady__clock"/>
      </node>
    </inheritancegraph>
    <location file="libraries/include/libhal/steady_clock.hpp" line="44" column="1" bodyfile="libraries/include/libhal/steady_clock.hpp" bodystart="45" bodyend="101"/>
    <listofallmembers>
      <member refid="classhal_1_1steady__clock_1af69e8bc7e978529720cb18149241ba85" prot="private" virt="pure-virtual"><scope>hal::steady_clock</scope><name>driver_frequency</name></member>
      <member refid="classhal_1_1steady__clock_1aa15e00cbbe00e98015aa86dbe016f812" prot="private" virt="pure-virtual"><scope>hal::steady_clock</scope><name>driver_uptime</name></member>
      <member refid="classhal_1_1steady__clock_1a2bb1983d9fa94b9fe5bdb8159de03220" prot="public" virt="non-virtual"><scope>hal::steady_clock</scope><name>frequency</name></member>
      <member refid="classhal_1_1steady__clock_1ae36599416bdd64434e56b2ff6a2c2262" prot="public" virt="non-virtual"><scope>hal::steady_clock</scope><name>uptime</name></member>
      <member refid="classhal_1_1steady__clock_1a8c1bf5a5f874b6971cd84e213afe6818" prot="public" virt="virtual"><scope>hal::steady_clock</scope><name>~steady_clock</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
