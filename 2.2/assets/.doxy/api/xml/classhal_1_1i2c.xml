<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhal_1_1i2c" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>hal::i2c</compoundname>
    <derivedcompoundref refid="classhal_1_1inert__i2c" prot="public" virt="non-virtual">hal::inert_i2c</derivedcompoundref>
    <derivedcompoundref refid="classhal_1_1lpc40_1_1i2c" prot="public" virt="non-virtual">hal::lpc40::i2c</derivedcompoundref>
    <derivedcompoundref refid="classhal_1_1minimum__speed__i2c" prot="public" virt="non-virtual">hal::minimum_speed_i2c</derivedcompoundref>
    <includes refid="libhal_2i2c_8hpp" local="no">i2c.hpp</includes>
    <innerclass refid="structhal_1_1i2c_1_1settings" prot="public">hal::i2c::settings</innerclass>
    <innerclass refid="structhal_1_1i2c_1_1transaction__t" prot="public">hal::i2c::transaction_t</innerclass>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhal_1_1i2c_1a28750634803a64517521a496222d0265" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>status</type>
        <definition>status hal::i2c::configure</definition>
        <argsstring>(const settings &amp;p_settings)</argsstring>
        <name>configure</name>
        <param>
          <type>const <ref refid="structhal_1_1i2c_1_1settings" kindref="compound">settings</ref> &amp;</type>
          <declname>p_settings</declname>
        </param>
        <briefdescription>
<para>Configure <ref refid="classhal_1_1i2c" kindref="compound">i2c</ref> to match the settings supplied. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_settings</parametername>
</parameternamelist>
<parameterdescription>
<para>- settings to apply to <ref refid="classhal_1_1i2c" kindref="compound">i2c</ref> driver </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status - success or failure </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::errc::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the settings could not be achieved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/i2c.hpp" line="66" column="11" bodyfile="libraries/include/libhal/i2c.hpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1i2c_1ab77e3c9347655368b887f3b14d4734a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>result&lt; <ref refid="structhal_1_1i2c_1_1transaction__t" kindref="compound">transaction_t</ref> &gt;</type>
        <definition>result&lt;transaction_t&gt; hal::i2c::transaction</definition>
        <argsstring>(hal::byte p_address, std::span&lt; const hal::byte &gt; p_data_out, std::span&lt; hal::byte &gt; p_data_in, hal::function_ref&lt; hal::timeout_function &gt; p_timeout)</argsstring>
        <name>transaction</name>
        <param>
          <type>hal::byte</type>
          <declname>p_address</declname>
        </param>
        <param>
          <type>std::span&lt; const hal::byte &gt;</type>
          <declname>p_data_out</declname>
        </param>
        <param>
          <type>std::span&lt; hal::byte &gt;</type>
          <declname>p_data_in</declname>
        </param>
        <param>
          <type>hal::function_ref&lt; <ref refid="libhal_2timeout_8hpp_1a8ca200d14bc94cb64c41994e2abb2401" kindref="member">hal::timeout_function</ref> &gt;</type>
          <declname>p_timeout</declname>
        </param>
        <briefdescription>
<para>perform an <ref refid="classhal_1_1i2c" kindref="compound">i2c</ref> transaction with another device on the bus. The type of transaction depends on values of input parameters. This function will block until the entire transfer is finished. </para>
        </briefdescription>
        <detaileddescription>
<para>Performing Write, Read and Write-Then-Read transactions depends on which span for data_out and data_in are set to null.</para>
<para><itemizedlist>
<listitem><para>For write transactions, pass p_data_in as an empty span <computeroutput>std::span&lt;hal::byte&gt;{}</computeroutput> and pass a buffer to p_data_out.</para>
</listitem><listitem><para>For read transactions, pass p_data_out as an empty span <computeroutput>std::span&lt;const hal::byte&gt;{}</computeroutput> and pass a buffer to p_data_in.</para>
</listitem><listitem><para>For write-then-read transactions, pass a buffer for both p_data_in p_data_out.</para>
</listitem><listitem><para>If both p_data_in and p_data_out are empty, simply do nothing and return success.</para>
</listitem></itemizedlist>
</para>
<para>In the event of arbitration loss, this function will wait for the bus to become free and try again. Arbitration loss means that during the address phase of a transaction 1 or more <ref refid="classhal_1_1i2c" kindref="compound">i2c</ref> bus controllers attempted to perform an transaction and one of the <ref refid="classhal_1_1i2c" kindref="compound">i2c</ref> bus controllers, that isn&apos;t this one won out.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_address</parametername>
</parameternamelist>
<parameterdescription>
<para>7-bit address of the device you want to communicate with. To perform a transaction with a 10-bit address, this parameter must be the address upper byte of the 10-bit address OR&apos;d with 0b1111&apos;0000 (the 10-bit address indicator). The lower byte of the address must be contained in the first byte of the p_data_out span. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_data_out</parametername>
</parameternamelist>
<parameterdescription>
<para>data to be written to the addressed device. Set to nullptr with length zero in order to skip writing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_data_in</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to store read data from the addressed device. Set to nullptr with length 0 in order to skip reading. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>callable which notifies the <ref refid="classhal_1_1i2c" kindref="compound">i2c</ref> driver that it has run out of time to perform the transaction and must stop and return control to the caller. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>result&lt;transaction_t&gt; - success or failure </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::errc::io_error</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates that the <ref refid="classhal_1_1i2c" kindref="compound">i2c</ref> lines were put into an invalid state during the transaction due to interference, misconfiguration of the <ref refid="classhal_1_1i2c" kindref="compound">i2c</ref> peripheral or the addressed device or something else. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::errc::no_such_device_or_address</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates that no devices on the bus acknowledge the address in this transaction, which could mean that the device is not connected to the bus, is not powered, not available to respond, broken or many other possible outcomes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::errc::timed_out</parametername>
</parameternamelist>
<parameterdescription>
<para>if the transaction exceeded its time allotment indicated by p_timeout. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/i2c.hpp" line="120" column="11" bodyfile="libraries/include/libhal/i2c.hpp" bodystart="120" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1i2c_1a7d4c54ed02f916538e7d5815232103e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual hal::i2c::~i2c</definition>
        <argsstring>()=default</argsstring>
        <name>~i2c</name>
        <reimplementedby refid="classhal_1_1lpc40_1_1i2c_1acf2224e6ad8e66648299512ce13c6192">~i2c</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/i2c.hpp" line="129" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhal_1_1i2c_1ac4c4b2e9b0248c1a6fc38bffc791191c" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>status</type>
        <definition>virtual status hal::i2c::driver_configure</definition>
        <argsstring>(const settings &amp;p_settings)=0</argsstring>
        <name>driver_configure</name>
        <reimplementedby refid="classhal_1_1minimum__speed__i2c_1ada64ea883ea018ce58927a842e2ead74">driver_configure</reimplementedby>
        <reimplementedby refid="classhal_1_1lpc40_1_1i2c_1a9e6556b38acae42abfed8472b2f343d1">driver_configure</reimplementedby>
        <param>
          <type>const <ref refid="structhal_1_1i2c_1_1settings" kindref="compound">settings</ref> &amp;</type>
          <declname>p_settings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/i2c.hpp" line="132" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1i2c_1a24b72c251213f8eb763cab0ecca40c6a" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>result&lt; <ref refid="structhal_1_1i2c_1_1transaction__t" kindref="compound">transaction_t</ref> &gt;</type>
        <definition>virtual result&lt;transaction_t&gt; hal::i2c::driver_transaction</definition>
        <argsstring>(hal::byte p_address, std::span&lt; const hal::byte &gt; p_data_out, std::span&lt; hal::byte &gt; p_data_in, hal::function_ref&lt; hal::timeout_function &gt; p_timeout)=0</argsstring>
        <name>driver_transaction</name>
        <reimplementedby refid="classhal_1_1lpc40_1_1i2c_1a3d35b82ab0aeaf16f31c55905bd76b12">driver_transaction</reimplementedby>
        <reimplementedby refid="classhal_1_1minimum__speed__i2c_1af9d10702a57cfee57ef0920be989e2a3">driver_transaction</reimplementedby>
        <param>
          <type>hal::byte</type>
          <declname>p_address</declname>
        </param>
        <param>
          <type>std::span&lt; const hal::byte &gt;</type>
          <declname>p_data_out</declname>
        </param>
        <param>
          <type>std::span&lt; hal::byte &gt;</type>
          <declname>p_data_in</declname>
        </param>
        <param>
          <type>hal::function_ref&lt; <ref refid="libhal_2timeout_8hpp_1a8ca200d14bc94cb64c41994e2abb2401" kindref="member">hal::timeout_function</ref> &gt;</type>
          <declname>p_timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/i2c.hpp" line="133" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Inter-integrated Circuit (I2C) hardware abstract interface. </para>
    </briefdescription>
    <detaileddescription>
<para>Also known as Two Wire Interface (TWI) communication protocol. This is a very commonly used protocol for communication with sensors and peripheral devices because it only requires two connections SDA (data signal) and SCL (clock signal). This is possible because the protocol for I2C is addressable. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>hal::minimum_speed_i2c</label>
        <link refid="classhal_1_1minimum__speed__i2c"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>hal::inert_i2c</label>
        <link refid="classhal_1_1inert__i2c"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>hal::lpc40::i2c</label>
        <link refid="classhal_1_1lpc40_1_1i2c"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>hal::i2c</label>
        <link refid="classhal_1_1i2c"/>
      </node>
    </inheritancegraph>
    <location file="libraries/include/libhal/i2c.hpp" line="34" column="1" bodyfile="libraries/include/libhal/i2c.hpp" bodystart="35" bodyend="138"/>
    <listofallmembers>
      <member refid="classhal_1_1i2c_1a28750634803a64517521a496222d0265" prot="public" virt="non-virtual"><scope>hal::i2c</scope><name>configure</name></member>
      <member refid="classhal_1_1i2c_1ac4c4b2e9b0248c1a6fc38bffc791191c" prot="private" virt="pure-virtual"><scope>hal::i2c</scope><name>driver_configure</name></member>
      <member refid="classhal_1_1i2c_1a24b72c251213f8eb763cab0ecca40c6a" prot="private" virt="pure-virtual"><scope>hal::i2c</scope><name>driver_transaction</name></member>
      <member refid="classhal_1_1i2c_1ab77e3c9347655368b887f3b14d4734a2" prot="public" virt="non-virtual"><scope>hal::i2c</scope><name>transaction</name></member>
      <member refid="classhal_1_1i2c_1a7d4c54ed02f916538e7d5815232103e7" prot="public" virt="virtual"><scope>hal::i2c</scope><name>~i2c</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
