<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhal_1_1overflow__counter" kind="class" language="C++" prot="public">
    <compoundname>hal::overflow_counter</compoundname>
    <includes refid="overflow__counter_8hpp" local="no">overflow_counter.hpp</includes>
    <templateparamlist>
      <param>
        <type>size_t</type>
        <declname>CountBitWidth</declname>
        <defname>CountBitWidth</defname>
        <defval>32</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhal_1_1overflow__counter_1a38a3693281fffe8006e33904499ae8ae" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t hal::overflow_counter&lt; CountBitWidth &gt;::m_previous_count</definition>
        <argsstring></argsstring>
        <name>m_previous_count</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-util/overflow_counter.hpp" line="87" column="12" bodyfile="libraries/include/libhal-util/overflow_counter.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhal_1_1overflow__counter_1a3a260e95d5769d6ab8d56422f70a7c95" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t hal::overflow_counter&lt; CountBitWidth &gt;::m_overflow_count</definition>
        <argsstring></argsstring>
        <name>m_overflow_count</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-util/overflow_counter.hpp" line="88" column="12" bodyfile="libraries/include/libhal-util/overflow_counter.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhal_1_1overflow__counter_1ad163ba83bbfaf045cbea424140183ff8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr uint64_t</type>
        <definition>constexpr uint64_t hal::overflow_counter&lt; CountBitWidth &gt;::update</definition>
        <argsstring>(uint32_t p_new_count)</argsstring>
        <name>update</name>
        <param>
          <type>uint32_t</type>
          <declname>p_new_count</declname>
        </param>
        <briefdescription>
<para>update the overflow counter, detect if an overflow has occurred, and return the combined </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_new_count</parametername>
</parameternamelist>
<parameterdescription>
<para>- must be an increasing value and should only decrease when an overflow event occurs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constexpr uint64_t - 64-bit count combining the new count value and the overflow count value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-util/overflow_counter.hpp" line="46" column="22" bodyfile="libraries/include/libhal-util/overflow_counter.hpp" bodystart="46" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1overflow__counter_1a46b705afba322c8b53d95b0b4ea4349f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>constexpr void hal::overflow_counter&lt; CountBitWidth &gt;::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Reset the overflow count back to zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-util/overflow_counter.hpp" line="80" column="18" bodyfile="libraries/include/libhal-util/overflow_counter.hpp" bodystart="80" bodyend="84"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Extend a counter&apos;s count from an arbitrary bit width to 64-bits by detecting overflows in the count. Each detected overflow is added to an overflow counter which is combined with the current count in order create a count up to 64-bits in length. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CountBitWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>- the bit width of the counter before the count value overflows. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="libraries/include/libhal-util/overflow_counter.hpp" line="32" column="1" bodyfile="libraries/include/libhal-util/overflow_counter.hpp" bodystart="33" bodyend="89"/>
    <listofallmembers>
      <member refid="classhal_1_1overflow__counter_1a3a260e95d5769d6ab8d56422f70a7c95" prot="private" virt="non-virtual"><scope>hal::overflow_counter</scope><name>m_overflow_count</name></member>
      <member refid="classhal_1_1overflow__counter_1a38a3693281fffe8006e33904499ae8ae" prot="private" virt="non-virtual"><scope>hal::overflow_counter</scope><name>m_previous_count</name></member>
      <member refid="classhal_1_1overflow__counter_1a46b705afba322c8b53d95b0b4ea4349f" prot="public" virt="non-virtual"><scope>hal::overflow_counter</scope><name>reset</name></member>
      <member refid="classhal_1_1overflow__counter_1ad163ba83bbfaf045cbea424140183ff8" prot="public" virt="non-virtual"><scope>hal::overflow_counter</scope><name>update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
