<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structhal_1_1bit__mask" kind="struct" language="C++" prot="public">
    <compoundname>hal::bit_mask</compoundname>
    <includes refid="bit_8hpp" local="no">bit.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" prot="public" static="no" mutable="no">
        <type>std::uint32_t</type>
        <definition>std::uint32_t hal::bit_mask::position</definition>
        <argsstring></argsstring>
        <name>position</name>
        <briefdescription>
<para>Where the bit mask starts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-util/bit.hpp" line="30" column="17" bodyfile="libraries/include/libhal-util/bit.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhal_1_1bit__mask_1ac77551388b9af88426b01c6516915f28" prot="public" static="no" mutable="no">
        <type>std::uint32_t</type>
        <definition>std::uint32_t hal::bit_mask::width</definition>
        <argsstring></argsstring>
        <name>width</name>
        <briefdescription>
<para>The number of bits after position contained in the mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-util/bit.hpp" line="32" column="17" bodyfile="libraries/include/libhal-util/bit.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structhal_1_1bit__mask_1aac23bb0f62776d60f0aa52f3e223c361" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::uint32_t</type>
            <declname>position1</declname>
            <defname>position1</defname>
          </param>
          <param>
            <type>std::uint32_t</type>
            <declname>position2</declname>
            <defname>position2</defname>
          </param>
        </templateparamlist>
        <type>consteval <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref></type>
        <definition>static consteval bit_mask hal::bit_mask::from</definition>
        <argsstring>()</argsstring>
        <name>from</name>
        <briefdescription>
<para>Generate, at compile time, a <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> that spans the from position1 to position2. </para>
        </briefdescription>
        <detaileddescription>
<para>If position1 is the same position2 then the <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> will have length of 1 and the bit position will be the value of position1.</para>
<para>position1 and position2 can be in any order so long as they span the distance from the start and end of the <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> range.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>position1</parametername>
</parameternamelist>
<parameterdescription>
<para>- bit position 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position2</parametername>
</parameternamelist>
<parameterdescription>
<para>- bit position 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>consteval <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> - bit <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> represented by the two bit positions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-util/bit.hpp" line="50" column="29" bodyfile="libraries/include/libhal-util/bit.hpp" bodystart="50" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="structhal_1_1bit__mask_1a1d1e9a47bfe6261dfeb502d90407972e" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::uint32_t</type>
            <declname>position</declname>
            <defname>position</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref></type>
        <definition>static constexpr bit_mask hal::bit_mask::from</definition>
        <argsstring>()</argsstring>
        <name>from</name>
        <briefdescription>
<para>Generate, at compile time, a single bit width <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> at position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- the bit to make the <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constexpr <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> - bit <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> with the position bit set to position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-util/bit.hpp" line="70" column="29" bodyfile="libraries/include/libhal-util/bit.hpp" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structhal_1_1bit__mask_1a911d8d8ed3967dec718e51db7df81588" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>consteval <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref></type>
        <definition>static consteval bit_mask hal::bit_mask::from</definition>
        <argsstring>(std::uint32_t position1, std::uint32_t position2)</argsstring>
        <name>from</name>
        <param>
          <type>std::uint32_t</type>
          <declname>position1</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>position2</declname>
        </param>
        <briefdescription>
<para>Generate, at compile time, a <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> that spans the from position1 to position2. </para>
        </briefdescription>
        <detaileddescription>
<para>If position1 is the same position2 then the <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> will have length of 1 and the bit position will be the value of position1.</para>
<para>position1 and position2 can be in any order so long as they span the distance from the start and end of the <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> range.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position1</parametername>
</parameternamelist>
<parameterdescription>
<para>- bit position 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position2</parametername>
</parameternamelist>
<parameterdescription>
<para>- bit position 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>consteval <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> - bit <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> represented by the two bit positions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-util/bit.hpp" line="90" column="29" bodyfile="libraries/include/libhal-util/bit.hpp" bodystart="90" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="structhal_1_1bit__mask_1ad577183d4f6139bcda795394f62db14b" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref></type>
        <definition>static constexpr bit_mask hal::bit_mask::from</definition>
        <argsstring>(std::uint32_t position)</argsstring>
        <name>from</name>
        <param>
          <type>std::uint32_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Generate, at runtime, a single bit width <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> at position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>- the bit to make the <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constexpr <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> - bit <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> with the position bit set to position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-util/bit.hpp" line="110" column="29" bodyfile="libraries/include/libhal-util/bit.hpp" bodystart="110" bodyend="113"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structhal_1_1bit__mask_1ab90f9216ed97b1496eb6da9952190bf6" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::unsigned_integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto hal::bit_mask::origin</definition>
        <argsstring>() const</argsstring>
        <name>origin</name>
        <briefdescription>
<para>Convert <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> to a integral representation but with bit position at 0. </para>
        </briefdescription>
        <detaileddescription>
<para>The integral presentation will have 1 bits starting from the position bit up to bit position + width. All other bits will be 0s.</para>
<para>For example: <verbatim> value&lt;std::uint16_t&gt;(bit_mask{
     .position = 1,
     .width = 4,
 }); // returns = 0b0000&apos;0000&apos;0000&apos;1111;
</verbatim> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned integral type to hold the <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constexpr auto - <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> value as an unsigned integer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-util/bit.hpp" line="133" column="18" bodyfile="libraries/include/libhal-util/bit.hpp" bodystart="133" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="structhal_1_1bit__mask_1a6bc7e3171bf1e580426112fccc5f356b" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::unsigned_integral</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto hal::bit_mask::value</definition>
        <argsstring>() const</argsstring>
        <name>value</name>
        <briefdescription>
<para>Convert mask to a integral representation. </para>
        </briefdescription>
        <detaileddescription>
<para>The integral presentation will have 1 bits starting from the position bit up to bit position + width. All other bits will be 0s.</para>
<para>For example: <verbatim> value&lt;std::uint16_t&gt;(bit_mask{
     .position = 1,
     .width = 4,
 }); // returns = 0b0000&apos;0000&apos;0001&apos;1110;
</verbatim> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- unsigned integral type to hold the mask </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>constexpr auto - mask value as an unsigned integer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-util/bit.hpp" line="166" column="18" bodyfile="libraries/include/libhal-util/bit.hpp" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="structhal_1_1bit__mask_1a339f15317e2775a1a531d7f9e5a86506" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool hal::bit_mask::operator==</definition>
        <argsstring>(const bit_mask &amp;other)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator between this mask and another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>- the other mask to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true - the masks are the same </para>
</simplesect>
<simplesect kind="return"><para>false - the masks are not the same </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-util/bit.hpp" line="178" column="18" bodyfile="libraries/include/libhal-util/bit.hpp" bodystart="178" bodyend="181"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a bit mask of contiguous bits. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/include/libhal-util/bit.hpp" line="27" column="1" bodyfile="libraries/include/libhal-util/bit.hpp" bodystart="28" bodyend="182"/>
    <listofallmembers>
      <member refid="structhal_1_1bit__mask_1aac23bb0f62776d60f0aa52f3e223c361" prot="public" virt="non-virtual"><scope>hal::bit_mask</scope><name>from</name></member>
      <member refid="structhal_1_1bit__mask_1a1d1e9a47bfe6261dfeb502d90407972e" prot="public" virt="non-virtual"><scope>hal::bit_mask</scope><name>from</name></member>
      <member refid="structhal_1_1bit__mask_1a911d8d8ed3967dec718e51db7df81588" prot="public" virt="non-virtual"><scope>hal::bit_mask</scope><name>from</name></member>
      <member refid="structhal_1_1bit__mask_1ad577183d4f6139bcda795394f62db14b" prot="public" virt="non-virtual"><scope>hal::bit_mask</scope><name>from</name></member>
      <member refid="structhal_1_1bit__mask_1a339f15317e2775a1a531d7f9e5a86506" prot="public" virt="non-virtual"><scope>hal::bit_mask</scope><name>operator==</name></member>
      <member refid="structhal_1_1bit__mask_1ab90f9216ed97b1496eb6da9952190bf6" prot="public" virt="non-virtual"><scope>hal::bit_mask</scope><name>origin</name></member>
      <member refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" prot="public" virt="non-virtual"><scope>hal::bit_mask</scope><name>position</name></member>
      <member refid="structhal_1_1bit__mask_1a6bc7e3171bf1e580426112fccc5f356b" prot="public" virt="non-virtual"><scope>hal::bit_mask</scope><name>value</name></member>
      <member refid="structhal_1_1bit__mask_1ac77551388b9af88426b01c6516915f28" prot="public" virt="non-virtual"><scope>hal::bit_mask</scope><name>width</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
