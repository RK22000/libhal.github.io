<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="libhal-lpc40_2can_8hpp" kind="file" language="C++">
    <compoundname>can.hpp</compoundname>
    <includes local="no">cstdint</includes>
    <includes refid="libhal_2can_8hpp" local="no">libhal/can.hpp</includes>
    <includes refid="libhal-lpc40_2constants_8hpp" local="yes">constants.hpp</includes>
    <includes refid="libhal-lpc40_2pin_8hpp" local="yes">pin.hpp</includes>
    <incdepgraph>
      <node id="7">
        <label>system_error</label>
      </node>
      <node id="2">
        <label>cstdint</label>
      </node>
      <node id="10">
        <label>tl/function_ref.hpp</label>
      </node>
      <node id="9">
        <label>third_party/inplace_function.hpp</label>
      </node>
      <node id="8">
        <label>functional.hpp</label>
        <link refid="functional_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>units.hpp</label>
        <link refid="libhal_2units_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>constants.hpp</label>
        <link refid="libhal-lpc40_2constants_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>boost/leaf.hpp</label>
      </node>
      <node id="4">
        <label>array</label>
      </node>
      <node id="5">
        <label>error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>pin.hpp</label>
        <link refid="libhal-lpc40_2pin_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>chrono</label>
      </node>
      <node id="1">
        <label>libraries/include/libhal-lpc40/can.hpp</label>
        <link refid="libhal-lpc40_2can_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>libhal/can.hpp</label>
        <link refid="libhal_2can_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classhal_1_1lpc40_1_1can" prot="public">hal::lpc40::can</innerclass>
    <innerclass refid="structhal_1_1lpc40_1_1can_1_1port" prot="public">hal::lpc40::can::port</innerclass>
    <innernamespace refid="namespacehal">hal</innernamespace>
    <innernamespace refid="namespacehal_1_1lpc40">hal::lpc40</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2023<sp/>Google<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libhal/can.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;constants.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pin.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hal::lpc40<sp/>{</highlight></codeline>
<codeline lineno="25" refid="classhal_1_1lpc40_1_1can" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhal_1_1lpc40_1_1can" kindref="compound">can</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classhal_1_1can" kindref="compound">hal::can</ref></highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30" refid="structhal_1_1lpc40_1_1can_1_1port" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhal_1_1lpc40_1_1can_1_1port" kindref="compound">port</ref></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="33" refid="structhal_1_1lpc40_1_1can_1_1port_1a2329f85e15c1182461861dd950c1bf96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhal_1_1lpc40_1_1pin" kindref="compound">pin</ref><sp/><ref refid="structhal_1_1lpc40_1_1can_1_1port_1a2329f85e15c1182461861dd950c1bf96" kindref="member">td</ref>;</highlight></codeline>
<codeline lineno="35" refid="structhal_1_1lpc40_1_1can_1_1port_1a07aa95ad5d6b55fac60148b173955f62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint8_t<sp/><ref refid="structhal_1_1lpc40_1_1can_1_1port_1a07aa95ad5d6b55fac60148b173955f62" kindref="member">td_function_code</ref>;</highlight></codeline>
<codeline lineno="37" refid="structhal_1_1lpc40_1_1can_1_1port_1a9255a8b57199bfb6ab2d4c676b992eb6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhal_1_1lpc40_1_1pin" kindref="compound">pin</ref><sp/><ref refid="structhal_1_1lpc40_1_1can_1_1port_1a9255a8b57199bfb6ab2d4c676b992eb6" kindref="member">rd</ref>;</highlight></codeline>
<codeline lineno="39" refid="structhal_1_1lpc40_1_1can_1_1port_1acf3286e3fc6892fdf7e42d9aa2299711" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint8_t<sp/><ref refid="structhal_1_1lpc40_1_1can_1_1port_1acf3286e3fc6892fdf7e42d9aa2299711" kindref="member">rd_function_code</ref>;</highlight></codeline>
<codeline lineno="41" refid="structhal_1_1lpc40_1_1can_1_1port_1adc3939bbd684a1dd4c3c41143230e3b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>peripheral<sp/><ref refid="structhal_1_1lpc40_1_1can_1_1port_1adc3939bbd684a1dd4c3c41143230e3b8" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="43" refid="structhal_1_1lpc40_1_1can_1_1port_1ab4f82b82dff70e115b21aa98581fb8ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>irq<sp/><ref refid="structhal_1_1lpc40_1_1can_1_1port_1ab4f82b82dff70e115b21aa98581fb8ac" kindref="member">irq_number</ref>;</highlight></codeline>
<codeline lineno="45" refid="structhal_1_1lpc40_1_1can_1_1port_1ad3355ca4bfc8486527ae57907688d581" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint8_t<sp/><ref refid="structhal_1_1lpc40_1_1can_1_1port_1ad3355ca4bfc8486527ae57907688d581" kindref="member">sync_jump</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="47" refid="structhal_1_1lpc40_1_1can_1_1port_1a7843ab269a78e3ab5d6f8201a8b0156f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint8_t<sp/><ref refid="structhal_1_1lpc40_1_1can_1_1port_1a7843ab269a78e3ab5d6f8201a8b0156f" kindref="member">tseg1</ref><sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="49" refid="structhal_1_1lpc40_1_1can_1_1port_1afa9ec2af3309a89ea5546f7bdd254a13" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint8_t<sp/><ref refid="structhal_1_1lpc40_1_1can_1_1port_1afa9ec2af3309a89ea5546f7bdd254a13" kindref="member">tseg2</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>result&lt;can&gt;<sp/>get(std::uint8_t<sp/>p_port,<sp/><ref refid="structhal_1_1can_1_1settings" kindref="compound">can::settings</ref><sp/>p_settings<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>~<ref refid="classhal_1_1lpc40_1_1can" kindref="compound">can</ref>();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1lpc40_1_1can" kindref="compound">can</ref>(port<sp/>p_port);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>status<sp/>driver_configure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>settings&amp;<sp/>p_settings)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>status<sp/>driver_bus_on()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>result&lt;send_t&gt;<sp/>driver_send(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>message_t&amp;<sp/>p_message)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>driver_on_receive(</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>hal::callback&lt;can::handler&gt;<sp/>p_receive_handler)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>port<sp/>m_port;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>hal::callback&lt;can::handler&gt;<sp/>m_receive_handler;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">};</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hal::lpc40</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="libraries/include/libhal-lpc40/can.hpp"/>
  </compounddef>
</doxygen>
