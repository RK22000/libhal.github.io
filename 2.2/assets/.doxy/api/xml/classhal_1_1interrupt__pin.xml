<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhal_1_1interrupt__pin" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>hal::interrupt_pin</compoundname>
    <derivedcompoundref refid="classhal_1_1inert__interrupt__pin" prot="public" virt="non-virtual">hal::inert_interrupt_pin</derivedcompoundref>
    <derivedcompoundref refid="classhal_1_1lpc40_1_1interrupt__pin" prot="public" virt="non-virtual">hal::lpc40::interrupt_pin</derivedcompoundref>
    <derivedcompoundref refid="structhal_1_1mock_1_1interrupt__pin" prot="public" virt="non-virtual">hal::mock::interrupt_pin</derivedcompoundref>
    <includes refid="libhal_2interrupt__pin_8hpp" local="no">interrupt_pin.hpp</includes>
    <innerclass refid="structhal_1_1interrupt__pin_1_1settings" prot="public">hal::interrupt_pin::settings</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classhal_1_1interrupt__pin_1a2e2cf60fe30a8683fb30cec584c7de81" prot="public" static="no" strong="yes">
        <type></type>
        <name>trigger_edge</name>
        <enumvalue id="classhal_1_1interrupt__pin_1a2e2cf60fe30a8683fb30cec584c7de81a465223d16534b847faf7b88e6cd17139" prot="public">
          <name>falling</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Trigger the interrupt when a pin transitions from HIGH voltage to LOW voltage. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classhal_1_1interrupt__pin_1a2e2cf60fe30a8683fb30cec584c7de81a637aa1a3f3fe939460e3e6126a3cb76a" prot="public">
          <name>rising</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Trigger the interrupt when a pin transitions from LOW voltage to HIGH voltage. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classhal_1_1interrupt__pin_1a2e2cf60fe30a8683fb30cec584c7de81af6cb3e816496528d4187db53bc66567f" prot="public">
          <name>both</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Trigger the interrupt when a pin transitions it state. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The condition in which an interrupt it&apos;s triggered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/interrupt_pin.hpp" line="41" column="3" bodyfile="libraries/include/libhal/interrupt_pin.hpp" bodystart="42" bodyend="60"/>
      </memberdef>
      <memberdef kind="typedef" id="classhal_1_1interrupt__pin_1ad49df850168e2a62551d6d3d1e81d86c" prot="public" static="no">
        <type>void(bool p_state)</type>
        <definition>using hal::interrupt_pin::handler =  void(bool p_state)</definition>
        <argsstring></argsstring>
        <name>handler</name>
        <briefdescription>
<para>Interrupt pin handler. </para>
        </briefdescription>
        <detaileddescription>
<para>param p_state - if true state of the pin when the interrupt was triggered was HIGH, otherwise LOW </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/interrupt_pin.hpp" line="91" column="3" bodyfile="libraries/include/libhal/interrupt_pin.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhal_1_1interrupt__pin_1ad4ecbb5149184f2d6a9002f6a51e2754" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>status</type>
        <definition>status hal::interrupt_pin::configure</definition>
        <argsstring>(const settings &amp;p_settings)</argsstring>
        <name>configure</name>
        <param>
          <type>const <ref refid="structhal_1_1interrupt__pin_1_1settings" kindref="compound">settings</ref> &amp;</type>
          <declname>p_settings</declname>
        </param>
        <briefdescription>
<para>Configure the interrupt pin to match the settings supplied. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_settings</parametername>
</parameternamelist>
<parameterdescription>
<para>- settings to apply to interrupt pin </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status - success or failure </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::errc::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the settings could not be achieved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/interrupt_pin.hpp" line="100" column="11" bodyfile="libraries/include/libhal/interrupt_pin.hpp" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1interrupt__pin_1aa110a57bf1d41c89a5df6b13740a6977" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hal::interrupt_pin::on_trigger</definition>
        <argsstring>(hal::callback&lt; handler &gt; p_callback)</argsstring>
        <name>on_trigger</name>
        <param>
          <type>hal::callback&lt; <ref refid="classhal_1_1interrupt__pin_1ad49df850168e2a62551d6d3d1e81d86c" kindref="member">handler</ref> &gt;</type>
          <declname>p_callback</declname>
        </param>
        <briefdescription>
<para>Set the callback for when the interrupt occurs. </para>
        </briefdescription>
        <detaileddescription>
<para>Any state transitions before this function is called are lost.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>- function to execute when the trigger condition occurs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/interrupt_pin.hpp" line="112" column="8" bodyfile="libraries/include/libhal/interrupt_pin.hpp" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1interrupt__pin_1ade8066862d68154d56b28c8fcc88073d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual hal::interrupt_pin::~interrupt_pin</definition>
        <argsstring>()=default</argsstring>
        <name>~interrupt_pin</name>
        <reimplementedby refid="classhal_1_1lpc40_1_1interrupt__pin_1ac1f516597c733fe492cf99e2e2c3036a">~interrupt_pin</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/interrupt_pin.hpp" line="117" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhal_1_1interrupt__pin_1af6304cc7832f6354cf8326e6c4ef1269" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>status</type>
        <definition>virtual status hal::interrupt_pin::driver_configure</definition>
        <argsstring>(const settings &amp;p_settings)=0</argsstring>
        <name>driver_configure</name>
        <reimplementedby refid="classhal_1_1lpc40_1_1interrupt__pin_1a683169c4065bc343ff7c017b554cc779">driver_configure</reimplementedby>
        <reimplementedby refid="structhal_1_1mock_1_1interrupt__pin_1a9cacdf204bf0014f23fb0e4192f8940c">driver_configure</reimplementedby>
        <param>
          <type>const <ref refid="structhal_1_1interrupt__pin_1_1settings" kindref="compound">settings</ref> &amp;</type>
          <declname>p_settings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/interrupt_pin.hpp" line="120" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1interrupt__pin_1a2d36c254b38e2f9794b0253b32009b71" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void hal::interrupt_pin::driver_on_trigger</definition>
        <argsstring>(hal::callback&lt; handler &gt; p_callback)=0</argsstring>
        <name>driver_on_trigger</name>
        <reimplementedby refid="classhal_1_1lpc40_1_1interrupt__pin_1a34e99af6027eb02677f9ddbdc1cbc2c8">driver_on_trigger</reimplementedby>
        <reimplementedby refid="structhal_1_1mock_1_1interrupt__pin_1ab186f669831aa4a0e8fa39e4ba3ea612">driver_on_trigger</reimplementedby>
        <param>
          <type>hal::callback&lt; <ref refid="classhal_1_1interrupt__pin_1ad49df850168e2a62551d6d3d1e81d86c" kindref="member">handler</ref> &gt;</type>
          <declname>p_callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/interrupt_pin.hpp" line="121" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Digital interrupt pin hardware abstraction. </para>
    </briefdescription>
    <detaileddescription>
<para>Use this to automatically call a function when a pin&apos;s state has transitioned.</para>
<para>The transition states are:</para>
<para><itemizedlist>
<listitem><para>falling edge: the pin reads a transitions from HIGH to LOW</para>
</listitem><listitem><para>rising edge: the pin reads a transitions from LOW to HIGH</para>
</listitem><listitem><para>both: the pin reads any state change </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>hal::mock::interrupt_pin</label>
        <link refid="structhal_1_1mock_1_1interrupt__pin"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>hal::lpc40::interrupt_pin</label>
        <link refid="classhal_1_1lpc40_1_1interrupt__pin"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>hal::interrupt_pin</label>
        <link refid="classhal_1_1interrupt__pin"/>
      </node>
      <node id="2">
        <label>hal::inert_interrupt_pin</label>
        <link refid="classhal_1_1inert__interrupt__pin"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="libraries/include/libhal/interrupt_pin.hpp" line="34" column="1" bodyfile="libraries/include/libhal/interrupt_pin.hpp" bodystart="35" bodyend="122"/>
    <listofallmembers>
      <member refid="classhal_1_1interrupt__pin_1ad4ecbb5149184f2d6a9002f6a51e2754" prot="public" virt="non-virtual"><scope>hal::interrupt_pin</scope><name>configure</name></member>
      <member refid="classhal_1_1interrupt__pin_1af6304cc7832f6354cf8326e6c4ef1269" prot="private" virt="pure-virtual"><scope>hal::interrupt_pin</scope><name>driver_configure</name></member>
      <member refid="classhal_1_1interrupt__pin_1a2d36c254b38e2f9794b0253b32009b71" prot="private" virt="pure-virtual"><scope>hal::interrupt_pin</scope><name>driver_on_trigger</name></member>
      <member refid="classhal_1_1interrupt__pin_1ad49df850168e2a62551d6d3d1e81d86c" prot="public" virt="non-virtual"><scope>hal::interrupt_pin</scope><name>handler</name></member>
      <member refid="classhal_1_1interrupt__pin_1aa110a57bf1d41c89a5df6b13740a6977" prot="public" virt="non-virtual"><scope>hal::interrupt_pin</scope><name>on_trigger</name></member>
      <member refid="classhal_1_1interrupt__pin_1a2e2cf60fe30a8683fb30cec584c7de81" prot="public" virt="non-virtual"><scope>hal::interrupt_pin</scope><name>trigger_edge</name></member>
      <member refid="classhal_1_1interrupt__pin_1ade8066862d68154d56b28c8fcc88073d" prot="public" virt="virtual"><scope>hal::interrupt_pin</scope><name>~interrupt_pin</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
