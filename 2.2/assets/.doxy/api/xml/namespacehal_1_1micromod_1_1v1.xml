<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacehal_1_1micromod_1_1v1" kind="namespace" language="C++">
    <compoundname>hal::micromod::v1</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="micromod_8hpp_1a9cfb4502d5790c50313d2fdf2dd8e6e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hal::micromod::v1::initialize_platform</definition>
        <argsstring>()</argsstring>
        <name>initialize_platform</name>
        <briefdescription>
<para>Initialize the system. </para>
        </briefdescription>
        <detaileddescription>
<para>Should be the first API called at the start of main. Typically sets up .data and .bss, heap sections if applicable, interrupt service routine handler and anything else necessary for code to function on the MCU. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="43" column="6" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1af915fc37bcfde9b4d33b5ac574d76e21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1steady__clock" kindref="compound">hal::steady_clock</ref> &amp;</type>
        <definition>hal::steady_clock&amp; hal::micromod::v1::uptime_clock</definition>
        <argsstring>()</argsstring>
        <name>uptime_clock</name>
        <briefdescription>
<para>steady clock to measures the cycles the processor has been up. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classhal_1_1steady__clock" kindref="compound">hal::steady_clock</ref>&amp; - system uptime steady clock. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="50" column="19" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="50" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a9c3f58308131737ec2ed369fe9e91b84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1timer" kindref="compound">hal::timer</ref> &amp;</type>
        <definition>hal::timer&amp; hal::micromod::v1::system_timer</definition>
        <argsstring>()</argsstring>
        <name>system_timer</name>
        <briefdescription>
<para>Get core system timer driver. </para>
        </briefdescription>
        <detaileddescription>
<para>Usually used as the system timer for the RTOS</para>
<para><simplesect kind="return"><para><ref refid="classhal_1_1timer" kindref="compound">hal::timer</ref>&amp; - reference to the timer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="59" column="12" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="59" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1ac18c74a941d416161962489265a5d9d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hal::micromod::v1::enter_power_saving_mode</definition>
        <argsstring>()</argsstring>
        <name>enter_power_saving_mode</name>
        <briefdescription>
<para>Enter power savings mode for your processor. </para>
        </briefdescription>
        <detaileddescription>
<para>Generally needs an interrupt to wake up the device from sleep </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="66" column="6" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="66" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1aa1a004f817b769e7ef7f2fc584edcbfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1serial" kindref="compound">hal::serial</ref> &amp;</type>
        <definition>hal::serial&amp; hal::micromod::v1::console</definition>
        <argsstring>(std::span&lt; hal::byte &gt; p_receive_buffer)</argsstring>
        <name>console</name>
        <param>
          <type>std::span&lt; <ref refid="namespacehal_1aa21f8ca97410869aabb284a575b2021d" kindref="member">hal::byte</ref> &gt;</type>
          <declname>p_receive_buffer</declname>
        </param>
        <briefdescription>
<para>Console serial interface. </para>
        </briefdescription>
        <detaileddescription>
<para>The console does not have to implement an actual serial communication protocol like, uart or rs232. It can be implemented with anything such as usb, <ref refid="classhal_1_1i2c" kindref="compound">i2c</ref> and spi, or something different. It just needs to follow the <ref refid="classhal_1_1serial" kindref="compound">hal::serial</ref> interface for writing, reading bytes from the console.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_receive_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>- The size of the receive buffer for the serial port. Note that subsequent calls to the function will ignore this parameter, thus the first call will set the receive buffer size. Ensure that the lifetime of the buffer is equal to or exceeds the lifetime of the console serial port. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhal_1_1serial" kindref="compound">hal::serial</ref>&amp; - serial interface to the console </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="82" column="13" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="82" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a97e3507a4c336454e0e43427e779ca69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hal::micromod::v1::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Resets the microcontroller, restarting the program in the process. </para>
        </briefdescription>
        <detaileddescription>
<para>If the application is executed as a program or process on operating system then this function should exit() with the code TBD which will alert the spawner process to rerun the command.</para>
<para>This function must not return. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="93" column="7" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="93" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a7dfd357659ddd945d08b8e051ccd625c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1output__pin" kindref="compound">hal::output_pin</ref> &amp;</type>
        <definition>hal::output_pin&amp; hal::micromod::v1::led</definition>
        <argsstring>()</argsstring>
        <name>led</name>
        <briefdescription>
<para>Driver for the board LED output pin. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classhal_1_1output__pin" kindref="compound">hal::output_pin</ref>&amp; - Statically allocated output pin driver connected to the LED. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="105" column="17" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="105" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1aded4c0911b16bf59d09934ad2ccd674d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1adc" kindref="compound">hal::adc</ref> &amp;</type>
        <definition>hal::adc&amp; hal::micromod::v1::a0</definition>
        <argsstring>()</argsstring>
        <name>a0</name>
        <briefdescription>
<para>Driver for adc pin 0. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classhal_1_1adc" kindref="compound">hal::adc</ref>&amp; - Statically allocated analog pin driver. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="116" column="10" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="116" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a0bc55490be50bc753241f4ac0b0fc200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1adc" kindref="compound">hal::adc</ref> &amp;</type>
        <definition>hal::adc&amp; hal::micromod::v1::a1</definition>
        <argsstring>()</argsstring>
        <name>a1</name>
        <briefdescription>
<para>Driver for adc pin 1. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classhal_1_1adc" kindref="compound">hal::adc</ref>&amp; - Statically allocated analog pin driver. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="123" column="10" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="123" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a9597d10f17b03019cf487affccef8591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1adc" kindref="compound">hal::adc</ref> &amp;</type>
        <definition>hal::adc&amp; hal::micromod::v1::battery</definition>
        <argsstring>()</argsstring>
        <name>battery</name>
        <briefdescription>
<para>Driver for battery analog signal which is 1/3rd of the VIN voltage. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classhal_1_1adc" kindref="compound">hal::adc</ref>&amp; - Statically allocated battery analog pin driver. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="130" column="10" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="130" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a7249e0b0d11b1bfba58e779dc484ae06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1dac" kindref="compound">hal::dac</ref> &amp;</type>
        <definition>hal::dac&amp; hal::micromod::v1::d0</definition>
        <argsstring>()</argsstring>
        <name>d0</name>
        <briefdescription>
<para>Driver for dac pin 0. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classhal_1_1dac" kindref="compound">hal::dac</ref>&amp; - Statically allocated dac pin driver. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="137" column="10" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="137" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1aa199fbb13081076dee000df6f48594aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1dac" kindref="compound">hal::dac</ref> &amp;</type>
        <definition>hal::dac&amp; hal::micromod::v1::d1</definition>
        <argsstring>()</argsstring>
        <name>d1</name>
        <briefdescription>
<para>Driver for dac pin 1. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classhal_1_1dac" kindref="compound">hal::dac</ref>&amp; - Statically allocated dac pin driver. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="144" column="10" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="144" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1ae24a2446e8f88296495f98bd1d27ff03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1pwm" kindref="compound">hal::pwm</ref> &amp;</type>
        <definition>hal::pwm&amp; hal::micromod::v1::pwm0</definition>
        <argsstring>()</argsstring>
        <name>pwm0</name>
        <briefdescription>
<para>Driver for pwm pin 0. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classhal_1_1pwm" kindref="compound">hal::pwm</ref>&amp; - Statically allocated pwm pin driver. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="151" column="10" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="151" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1ab73b4d577fe55f569daea17fb3427fa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1pwm" kindref="compound">hal::pwm</ref> &amp;</type>
        <definition>hal::pwm&amp; hal::micromod::v1::pwm1</definition>
        <argsstring>()</argsstring>
        <name>pwm1</name>
        <briefdescription>
<para>Driver for pwm pin 1. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classhal_1_1pwm" kindref="compound">hal::pwm</ref>&amp; - Statically allocated pwm pin driver. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="158" column="10" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="158" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a58a9d5884297c55e41fe456988ef4c76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1i2c" kindref="compound">hal::i2c</ref> &amp;</type>
        <definition>hal::i2c&amp; hal::micromod::v1::i2c</definition>
        <argsstring>()</argsstring>
        <name>i2c</name>
        <briefdescription>
<para>Driver for the main <ref refid="classhal_1_1i2c" kindref="compound">i2c</ref> bus. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classhal_1_1i2c" kindref="compound">hal::i2c</ref>&amp; - Statically allocated <ref refid="classhal_1_1i2c" kindref="compound">i2c</ref> driver. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="169" column="10" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="169" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1aa8da7acb258d7dcf8c600ee9468bb687" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1interrupt__pin" kindref="compound">hal::interrupt_pin</ref> &amp;</type>
        <definition>hal::interrupt_pin&amp; hal::micromod::v1::i2c_interrupt_pin</definition>
        <argsstring>()</argsstring>
        <name>i2c_interrupt_pin</name>
        <briefdescription>
<para>Driver for <ref refid="classhal_1_1i2c" kindref="compound">i2c</ref> interrupt pin. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: that this pin can be used as an interrupt pin for both or either <ref refid="classhal_1_1i2c" kindref="compound">i2c</ref> buss.</para>
<para><simplesect kind="return"><para><ref refid="classhal_1_1interrupt__pin" kindref="compound">hal::interrupt_pin</ref>&amp; - Statically allocated interrupt pin driver. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="179" column="20" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="179" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1ab14b23bb2b9148ff781363aa9fe18c53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1i2c" kindref="compound">hal::i2c</ref> &amp;</type>
        <definition>hal::i2c&amp; hal::micromod::v1::i2c1</definition>
        <argsstring>()</argsstring>
        <name>i2c1</name>
        <briefdescription>
<para>Driver for the alternative <ref refid="classhal_1_1i2c" kindref="compound">i2c</ref> bus 1. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classhal_1_1i2c" kindref="compound">hal::i2c</ref>&amp; - Statically allocated <ref refid="classhal_1_1i2c" kindref="compound">i2c</ref> driver. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="186" column="10" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="186" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1ac0cafc03aac927c47b5b33b130c42360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1spi" kindref="compound">hal::spi</ref> &amp;</type>
        <definition>hal::spi&amp; hal::micromod::v1::spi</definition>
        <argsstring>()</argsstring>
        <name>spi</name>
        <briefdescription>
<para>Driver for the main spi bus. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: in future iterations of this API, there will exist an sdio port used for talking to SD cards. This port is shared with the future sdio port. Take care to not use this along with the sdio port in the same application as they will conflict with each other resulting in undefined behavior.</para>
<para><simplesect kind="return"><para><ref refid="classhal_1_1spi" kindref="compound">hal::spi</ref>&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="198" column="10" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="198" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a0c6800aa5467bf8a303ac0f7d24a5a70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1interrupt__pin" kindref="compound">hal::interrupt_pin</ref> &amp;</type>
        <definition>hal::interrupt_pin&amp; hal::micromod::v1::spi_interrupt_pin</definition>
        <argsstring>()</argsstring>
        <name>spi_interrupt_pin</name>
        <briefdescription>
<para>Driver for spi interrupt pin. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: that this pin can be used as an interrupt pin for both or either spi ports.</para>
<para><simplesect kind="return"><para><ref refid="classhal_1_1interrupt__pin" kindref="compound">hal::interrupt_pin</ref>&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="208" column="20" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="208" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a207a509ea5fa46d4cbd20de120a50dfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1spi" kindref="compound">hal::spi</ref> &amp;</type>
        <definition>hal::spi&amp; hal::micromod::v1::spi1</definition>
        <argsstring>()</argsstring>
        <name>spi1</name>
        <briefdescription>
<para>Driver for the alternative spi port 1. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classhal_1_1spi" kindref="compound">hal::spi</ref>&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="215" column="10" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="215" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1adc5ea5233ff0f8d709e742a69ff480d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1serial" kindref="compound">hal::serial</ref> &amp;</type>
        <definition>hal::serial&amp; hal::micromod::v1::uart1</definition>
        <argsstring>(std::span&lt; hal::byte &gt; p_receive_buffer)</argsstring>
        <name>uart1</name>
        <param>
          <type>std::span&lt; <ref refid="namespacehal_1aa21f8ca97410869aabb284a575b2021d" kindref="member">hal::byte</ref> &gt;</type>
          <declname>p_receive_buffer</declname>
        </param>
        <briefdescription>
<para>Driver for uart 1 port. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_receive_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>- The size of the receive buffer for the serial port. Note that subsequent calls to the function will ignore this parameter, thus the first call will set the receive buffer size. Ensure that the lifetime of the buffer is equal to or exceeds the lifetime of the uart port. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhal_1_1serial" kindref="compound">hal::serial</ref>&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="226" column="13" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="226" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1af0429a7e3fe17f30ea9a7a34ea1b680a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1serial" kindref="compound">hal::serial</ref> &amp;</type>
        <definition>hal::serial&amp; hal::micromod::v1::uart2</definition>
        <argsstring>(std::span&lt; hal::byte &gt; p_receive_buffer)</argsstring>
        <name>uart2</name>
        <param>
          <type>std::span&lt; <ref refid="namespacehal_1aa21f8ca97410869aabb284a575b2021d" kindref="member">hal::byte</ref> &gt;</type>
          <declname>p_receive_buffer</declname>
        </param>
        <briefdescription>
<para>Driver for uart 0 port. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_receive_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>- The size of the receive buffer for the serial port. Note that subsequent calls to the function will ignore this parameter, thus the first call will set the receive buffer size. Ensure that the lifetime of the buffer is equal to or exceeds the lifetime of the uart port. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classhal_1_1serial" kindref="compound">hal::serial</ref>&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="237" column="13" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="237" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a0af5e0337e3d21caed03867aeb824299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1can" kindref="compound">hal::can</ref> &amp;</type>
        <definition>hal::can&amp; hal::micromod::v1::can</definition>
        <argsstring>()</argsstring>
        <name>can</name>
        <briefdescription>
<para>Driver for the can bus. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classhal_1_1can" kindref="compound">hal::can</ref>&amp; - statically allocated can driver </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="244" column="10" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="244" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a6f1e7db6ccd778dadec91f4e71106adb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1output__pin" kindref="compound">hal::output_pin</ref> &amp;</type>
        <definition>hal::output_pin&amp; hal::micromod::v1::output_g0</definition>
        <argsstring>()</argsstring>
        <name>output_g0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="250" column="17" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="250" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1af11d8b972c291f128f4a5bdc5b920cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1output__pin" kindref="compound">hal::output_pin</ref> &amp;</type>
        <definition>hal::output_pin&amp; hal::micromod::v1::output_g1</definition>
        <argsstring>()</argsstring>
        <name>output_g1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="251" column="17" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="251" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a6dc7a7e8ca5e87fc0afa4369b6db609e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1output__pin" kindref="compound">hal::output_pin</ref> &amp;</type>
        <definition>hal::output_pin&amp; hal::micromod::v1::output_g2</definition>
        <argsstring>()</argsstring>
        <name>output_g2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="252" column="17" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="252" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a7c8383900c0998cc8a6de51b629e3efd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1output__pin" kindref="compound">hal::output_pin</ref> &amp;</type>
        <definition>hal::output_pin&amp; hal::micromod::v1::output_g3</definition>
        <argsstring>()</argsstring>
        <name>output_g3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="253" column="17" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="253" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a8fe146b68422a575a129ecf392e3a131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1output__pin" kindref="compound">hal::output_pin</ref> &amp;</type>
        <definition>hal::output_pin&amp; hal::micromod::v1::output_g4</definition>
        <argsstring>()</argsstring>
        <name>output_g4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="254" column="17" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="254" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1aaac4d265e680bba65522082f7bf3ca7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1output__pin" kindref="compound">hal::output_pin</ref> &amp;</type>
        <definition>hal::output_pin&amp; hal::micromod::v1::output_g5</definition>
        <argsstring>()</argsstring>
        <name>output_g5</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="255" column="17" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="255" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1ad4fcf77b5403f71f5bfaa7cd8aef99ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1output__pin" kindref="compound">hal::output_pin</ref> &amp;</type>
        <definition>hal::output_pin&amp; hal::micromod::v1::output_g6</definition>
        <argsstring>()</argsstring>
        <name>output_g6</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="256" column="17" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="256" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a36969a2bb2d57242bce91c10ef46a4c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1output__pin" kindref="compound">hal::output_pin</ref> &amp;</type>
        <definition>hal::output_pin&amp; hal::micromod::v1::output_g7</definition>
        <argsstring>()</argsstring>
        <name>output_g7</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="257" column="17" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="257" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a43930f64649056db136e7afe2d65eeb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1output__pin" kindref="compound">hal::output_pin</ref> &amp;</type>
        <definition>hal::output_pin&amp; hal::micromod::v1::output_g8</definition>
        <argsstring>()</argsstring>
        <name>output_g8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="258" column="17" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="258" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a1846a5b4a2c4181b0ea7dbfbc194edf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1output__pin" kindref="compound">hal::output_pin</ref> &amp;</type>
        <definition>hal::output_pin&amp; hal::micromod::v1::output_g9</definition>
        <argsstring>()</argsstring>
        <name>output_g9</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="259" column="17" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="259" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a27d9fe85dc681b2e9943a0b7292bce9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1output__pin" kindref="compound">hal::output_pin</ref> &amp;</type>
        <definition>hal::output_pin&amp; hal::micromod::v1::output_g10</definition>
        <argsstring>()</argsstring>
        <name>output_g10</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="260" column="17" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="260" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a2b0515f942ac4e26e99887924fb9dafb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1input__pin" kindref="compound">hal::input_pin</ref> &amp;</type>
        <definition>hal::input_pin&amp; hal::micromod::v1::input_g0</definition>
        <argsstring>()</argsstring>
        <name>input_g0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="262" column="16" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="262" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1abcc7aec0e2b0438c46b6b38d39241b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1input__pin" kindref="compound">hal::input_pin</ref> &amp;</type>
        <definition>hal::input_pin&amp; hal::micromod::v1::input_g1</definition>
        <argsstring>()</argsstring>
        <name>input_g1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="263" column="16" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="263" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a85401dbe3f16f603e9da58bf45a82a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1input__pin" kindref="compound">hal::input_pin</ref> &amp;</type>
        <definition>hal::input_pin&amp; hal::micromod::v1::input_g2</definition>
        <argsstring>()</argsstring>
        <name>input_g2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="264" column="16" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="264" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1af436292b29e04384f441c731ac30f400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1input__pin" kindref="compound">hal::input_pin</ref> &amp;</type>
        <definition>hal::input_pin&amp; hal::micromod::v1::input_g3</definition>
        <argsstring>()</argsstring>
        <name>input_g3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="265" column="16" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="265" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1adc0322427f571ca59dbcdb218cf3f927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1input__pin" kindref="compound">hal::input_pin</ref> &amp;</type>
        <definition>hal::input_pin&amp; hal::micromod::v1::input_g4</definition>
        <argsstring>()</argsstring>
        <name>input_g4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="266" column="16" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="266" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a901a4290d067ec65fa26a93e15b7c131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1input__pin" kindref="compound">hal::input_pin</ref> &amp;</type>
        <definition>hal::input_pin&amp; hal::micromod::v1::input_g5</definition>
        <argsstring>()</argsstring>
        <name>input_g5</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="267" column="16" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="267" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a9735b4a704be847b582f4b39738890ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1input__pin" kindref="compound">hal::input_pin</ref> &amp;</type>
        <definition>hal::input_pin&amp; hal::micromod::v1::input_g6</definition>
        <argsstring>()</argsstring>
        <name>input_g6</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="268" column="16" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="268" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a4b927d4759e4cf3fa2ebc0dae683e706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1input__pin" kindref="compound">hal::input_pin</ref> &amp;</type>
        <definition>hal::input_pin&amp; hal::micromod::v1::input_g7</definition>
        <argsstring>()</argsstring>
        <name>input_g7</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="269" column="16" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="269" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a30783c969904c5b9746e8615d57a0e9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1input__pin" kindref="compound">hal::input_pin</ref> &amp;</type>
        <definition>hal::input_pin&amp; hal::micromod::v1::input_g8</definition>
        <argsstring>()</argsstring>
        <name>input_g8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="270" column="16" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="270" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a24786d30f6dd3bf34a4f09b686f7e47c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1input__pin" kindref="compound">hal::input_pin</ref> &amp;</type>
        <definition>hal::input_pin&amp; hal::micromod::v1::input_g9</definition>
        <argsstring>()</argsstring>
        <name>input_g9</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="271" column="16" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="271" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a54298765892c800e05fdd5dd9c22935c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1input__pin" kindref="compound">hal::input_pin</ref> &amp;</type>
        <definition>hal::input_pin&amp; hal::micromod::v1::input_g10</definition>
        <argsstring>()</argsstring>
        <name>input_g10</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="272" column="16" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="272" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a35b968d72d17eb62605f43d1457dd0f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1interrupt__pin" kindref="compound">hal::interrupt_pin</ref> &amp;</type>
        <definition>hal::interrupt_pin&amp; hal::micromod::v1::interrupt_g0</definition>
        <argsstring>()</argsstring>
        <name>interrupt_g0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="274" column="20" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="274" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a47bc500e26c64be46e3bfc60403ed463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1interrupt__pin" kindref="compound">hal::interrupt_pin</ref> &amp;</type>
        <definition>hal::interrupt_pin&amp; hal::micromod::v1::interrupt_g1</definition>
        <argsstring>()</argsstring>
        <name>interrupt_g1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="275" column="20" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="275" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1ae9221c096511f35af4bc83fe1b0ec2a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1interrupt__pin" kindref="compound">hal::interrupt_pin</ref> &amp;</type>
        <definition>hal::interrupt_pin&amp; hal::micromod::v1::interrupt_g2</definition>
        <argsstring>()</argsstring>
        <name>interrupt_g2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="276" column="20" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="276" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a268d74408c0bd790115d55d50e6e97b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1interrupt__pin" kindref="compound">hal::interrupt_pin</ref> &amp;</type>
        <definition>hal::interrupt_pin&amp; hal::micromod::v1::interrupt_g3</definition>
        <argsstring>()</argsstring>
        <name>interrupt_g3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="277" column="20" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="277" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1aeca51405a41a144ce88318156bd581b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1interrupt__pin" kindref="compound">hal::interrupt_pin</ref> &amp;</type>
        <definition>hal::interrupt_pin&amp; hal::micromod::v1::interrupt_g4</definition>
        <argsstring>()</argsstring>
        <name>interrupt_g4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="278" column="20" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="278" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a13d1093f9c10c8ea4295d916ad155796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1interrupt__pin" kindref="compound">hal::interrupt_pin</ref> &amp;</type>
        <definition>hal::interrupt_pin&amp; hal::micromod::v1::interrupt_g5</definition>
        <argsstring>()</argsstring>
        <name>interrupt_g5</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="279" column="20" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="279" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1ad74d1a543305f61b4d0bace380a34a28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1interrupt__pin" kindref="compound">hal::interrupt_pin</ref> &amp;</type>
        <definition>hal::interrupt_pin&amp; hal::micromod::v1::interrupt_g6</definition>
        <argsstring>()</argsstring>
        <name>interrupt_g6</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="280" column="20" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="280" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a1740e3b9da457e707625c6b2826a079b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1interrupt__pin" kindref="compound">hal::interrupt_pin</ref> &amp;</type>
        <definition>hal::interrupt_pin&amp; hal::micromod::v1::interrupt_g7</definition>
        <argsstring>()</argsstring>
        <name>interrupt_g7</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="281" column="20" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="281" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a70c084a7a6667eb3b1dabd831301a468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1interrupt__pin" kindref="compound">hal::interrupt_pin</ref> &amp;</type>
        <definition>hal::interrupt_pin&amp; hal::micromod::v1::interrupt_g8</definition>
        <argsstring>()</argsstring>
        <name>interrupt_g8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="282" column="20" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="282" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a6411e72aa4127899fda01e25649bfe75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1interrupt__pin" kindref="compound">hal::interrupt_pin</ref> &amp;</type>
        <definition>hal::interrupt_pin&amp; hal::micromod::v1::interrupt_g9</definition>
        <argsstring>()</argsstring>
        <name>interrupt_g9</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="283" column="20" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="283" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="micromod_8hpp_1a4cb0dccd08ba2c91803c589046771424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1interrupt__pin" kindref="compound">hal::interrupt_pin</ref> &amp;</type>
        <definition>hal::interrupt_pin&amp; hal::micromod::v1::interrupt_g10</definition>
        <argsstring>()</argsstring>
        <name>interrupt_g10</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-micromod/micromod.hpp" line="284" column="20" declfile="libraries/include/libhal-micromod/micromod.hpp" declline="284" declcolumn="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/include/libhal-micromod/micromod.hpp" line="30" column="1"/>
  </compounddef>
</doxygen>
