<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhal_1_1cortex__m_1_1interrupt" kind="class" language="C++" prot="public">
    <compoundname>hal::cortex_m::interrupt</compoundname>
    <includes refid="interrupt_8hpp" local="no">interrupt.hpp</includes>
    <innerclass refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number" prot="public">hal::cortex_m::interrupt::exception_number</innerclass>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classhal_1_1cortex__m_1_1interrupt_1a1a83927d27902c18f5e45dfb0d957dfb" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t hal::cortex_m::interrupt::core_interrupts</definition>
        <argsstring></argsstring>
        <name>core_interrupts</name>
        <initializer>= 16</initializer>
        <briefdescription>
<para>The core interrupts that all cortex m3, m4, m7 processors have. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="61" column="27" bodyfile="libraries/include/libhal-armcortex/interrupt.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhal_1_1cortex__m_1_1interrupt_1a891394906de5fb0ac80b214d7c90e13f" prot="private" static="no" mutable="no">
        <type><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number" kindref="compound">exception_number</ref></type>
        <definition>exception_number hal::cortex_m::interrupt::m_id</definition>
        <argsstring></argsstring>
        <name>m_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="275" column="20" bodyfile="libraries/include/libhal-armcortex/interrupt.hpp" bodystart="275" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1ab9f7c5585a2b28e04cf5aae53a07c961" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void hal::cortex_m::interrupt::nop</definition>
        <argsstring>()</argsstring>
        <name>nop</name>
        <briefdescription>
<para>Place holder interrupt that performs no work. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="174" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1a2bb148e9f62ee19f5de67fb10efa1492" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>VectorCount</declname>
            <defname>VectorCount</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void hal::cortex_m::interrupt::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <briefdescription>
<para>Initializes the interrupt vector table. </para>
        </briefdescription>
        <detaileddescription>
<para>This template function does the following:<itemizedlist>
<listitem><para>Statically allocates a 512-byte aligned an interrupt vector table the size of VectorCount.</para>
</listitem><listitem><para>Set the default handlers for all interrupt vectors to the &quot;nop&quot; function which does nothing</para>
</listitem><listitem><para>Set vector_table span to the statically allocated vector table.</para>
</listitem><listitem><para>Finally it relocates the system&apos;s interrupt vector table away from the hard coded vector table in ROM/Flash memory to the statically allocated table in RAM.</para>
</listitem></itemizedlist>
</para>
<para>Internally, this function checks if it has been called before and will simply return early if so. Making this function safe to call multiple times so long as the VectorCount template parameter is the same with each invocation.</para>
<para>Calling this function with differing VectorCount values will result in multiple statically allocated interrupt vector tables, which will simply waste space in RAM. Only the first call is used as the IVT.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VectorCount</parametername>
</parameternamelist>
<parameterdescription>
<para>- the number of interrupts available for this system </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="201" column="15" bodyfile="libraries/include/libhal-armcortex/interrupt.hpp" bodystart="201" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1ad8162f55a4b3291d6b4d166bddcc9b3f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>VectorCount</declname>
            <defname>VectorCount</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void hal::cortex_m::interrupt::reinitialize</definition>
        <argsstring>()</argsstring>
        <name>reinitialize</name>
        <briefdescription>
<para>Reinitialize vector table. </para>
        </briefdescription>
        <detaileddescription>
<para>Will reset the entries of the vector table. Careful to not use this after any drivers have already put entries on to the vector table. This will also disable all interrupts currently enabled on the system.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VectorCount</parametername>
</parameternamelist>
<parameterdescription>
<para>- the number of interrupts available for this system </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="220" column="15" bodyfile="libraries/include/libhal-armcortex/interrupt.hpp" bodystart="220" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1a9009384257f7bda0802c476b9fce78f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::span&lt; <ref refid="namespacehal_1_1cortex__m_1a16233c06cbfec74ed1d91019cf84cabc" kindref="member">interrupt_pointer</ref> &gt;</type>
        <definition>static const std::span&lt;interrupt_pointer&gt; hal::cortex_m::interrupt::get_vector_table</definition>
        <argsstring>()</argsstring>
        <name>get_vector_table</name>
        <briefdescription>
<para>Get a reference to interrupt vector table object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const std::span&lt;interrupt_pointer&gt; - interrupt vector table </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="231" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1a91e221aeccd451737e1ec7121ff7665c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void hal::cortex_m::interrupt::disable_interrupts</definition>
        <argsstring>()</argsstring>
        <name>disable_interrupts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="233" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1a1a4f42d7b2bbbe1be151f2ac78580202" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void hal::cortex_m::interrupt::enable_interrupts</definition>
        <argsstring>()</argsstring>
        <name>enable_interrupts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="235" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1a045c9af5b95f2af7d38f40e9b37126fe" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>hal::cortex_m::interrupt::interrupt</definition>
        <argsstring>(exception_number p_id)</argsstring>
        <name>interrupt</name>
        <param>
          <type><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number" kindref="compound">exception_number</ref></type>
          <declname>p_id</declname>
        </param>
        <briefdescription>
<para>Construct a new interrupt object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_id</parametername>
</parameternamelist>
<parameterdescription>
<para>- interrupt to configure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="242" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1a2ef9a13db819236f2c5325fd872daa6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hal::cortex_m::interrupt::enable</definition>
        <argsstring>(interrupt_pointer p_handler)</argsstring>
        <name>enable</name>
        <param>
          <type><ref refid="namespacehal_1_1cortex__m_1a16233c06cbfec74ed1d91019cf84cabc" kindref="member">interrupt_pointer</ref></type>
          <declname>p_handler</declname>
        </param>
        <briefdescription>
<para>enable interrupt and set the service routine handler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>- the interrupt service routine handler to be executed when the hardware interrupt is fired. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="250" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1ac07a42c480932acb60897e7fc832eb2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hal::cortex_m::interrupt::disable</definition>
        <argsstring>()</argsstring>
        <name>disable</name>
        <briefdescription>
<para>disable interrupt and set the service routine handler to &quot;nop&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>If the IRQ is invalid, then nothing happens. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="257" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1ac0fbc2f57be172ebb45b1cb3b088b0b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hal::cortex_m::interrupt::verify_vector_enabled</definition>
        <argsstring>(interrupt_pointer p_handler)</argsstring>
        <name>verify_vector_enabled</name>
        <param>
          <type><ref refid="namespacehal_1_1cortex__m_1a16233c06cbfec74ed1d91019cf84cabc" kindref="member">interrupt_pointer</ref></type>
          <declname>p_handler</declname>
        </param>
        <briefdescription>
<para>determine if a particular handler has been put into the interrupt vector table. </para>
        </briefdescription>
        <detaileddescription>
<para>Generally used by unit testing code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>- the handler to check against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true - the handler is equal to the handler in the table </para>
</simplesect>
<simplesect kind="return"><para>false - the handler is not at this index in the table </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="269" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1a7fcfe28296d0acf5708d8e4e740e08eb" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void hal::cortex_m::interrupt::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="272" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1a4daf9bba8770d831bddfb70a46287d75" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void hal::cortex_m::interrupt::setup</definition>
        <argsstring>(std::span&lt; interrupt_pointer &gt; p_vector_table)</argsstring>
        <name>setup</name>
        <param>
          <type>std::span&lt; <ref refid="namespacehal_1_1cortex__m_1a16233c06cbfec74ed1d91019cf84cabc" kindref="member">interrupt_pointer</ref> &gt;</type>
          <declname>p_vector_table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="273" column="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Cortex M series interrupt controller. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="57" column="1" bodyfile="libraries/include/libhal-armcortex/interrupt.hpp" bodystart="58" bodyend="276"/>
    <listofallmembers>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1a1a83927d27902c18f5e45dfb0d957dfb" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt</scope><name>core_interrupts</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1ac07a42c480932acb60897e7fc832eb2d" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt</scope><name>disable</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1a91e221aeccd451737e1ec7121ff7665c" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt</scope><name>disable_interrupts</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1a2ef9a13db819236f2c5325fd872daa6f" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt</scope><name>enable</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1a1a4f42d7b2bbbe1be151f2ac78580202" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt</scope><name>enable_interrupts</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1a9009384257f7bda0802c476b9fce78f4" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt</scope><name>get_vector_table</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1a2bb148e9f62ee19f5de67fb10efa1492" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt</scope><name>initialize</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1a045c9af5b95f2af7d38f40e9b37126fe" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt</scope><name>interrupt</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1a891394906de5fb0ac80b214d7c90e13f" prot="private" virt="non-virtual"><scope>hal::cortex_m::interrupt</scope><name>m_id</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1ab9f7c5585a2b28e04cf5aae53a07c961" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt</scope><name>nop</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1ad8162f55a4b3291d6b4d166bddcc9b3f" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt</scope><name>reinitialize</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1a7fcfe28296d0acf5708d8e4e740e08eb" prot="private" virt="non-virtual"><scope>hal::cortex_m::interrupt</scope><name>reset</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1a4daf9bba8770d831bddfb70a46287d75" prot="private" virt="non-virtual"><scope>hal::cortex_m::interrupt</scope><name>setup</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1ac0fbc2f57be172ebb45b1cb3b088b0b4" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt</scope><name>verify_vector_enabled</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
