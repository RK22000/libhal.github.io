<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="libhal-util_2serial_8hpp" kind="file" language="C++">
    <compoundname>serial.hpp</compoundname>
    <includes local="no">cstdio</includes>
    <includes local="no">span</includes>
    <includes local="no">string_view</includes>
    <includes refid="error_8hpp" local="no">libhal/error.hpp</includes>
    <includes refid="libhal_2serial_8hpp" local="no">libhal/serial.hpp</includes>
    <includes refid="libhal_2timeout_8hpp" local="no">libhal/timeout.hpp</includes>
    <includes refid="libhal_2units_8hpp" local="no">libhal/units.hpp</includes>
    <includes refid="as__bytes_8hpp" local="yes">as_bytes.hpp</includes>
    <includes refid="comparison_8hpp" local="yes">comparison.hpp</includes>
    <includes refid="math_8hpp" local="yes">math.hpp</includes>
    <incdepgraph>
      <node id="7">
        <label>system_error</label>
      </node>
      <node id="24">
        <label>limits</label>
      </node>
      <node id="19">
        <label>comparison.hpp</label>
        <link refid="comparison_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>cstdint</label>
      </node>
      <node id="17">
        <label>tl/function_ref.hpp</label>
      </node>
      <node id="14">
        <label>libhal/timeout.hpp</label>
        <link refid="libhal_2timeout_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>libraries/include/libhal-util/serial.hpp</label>
        <link refid="libhal-util_2serial_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>math.hpp</label>
        <link refid="math_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>third_party/inplace_function.hpp</label>
      </node>
      <node id="15">
        <label>functional.hpp</label>
        <link refid="functional_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>string_view</label>
      </node>
      <node id="2">
        <label>cstdio</label>
      </node>
      <node id="12">
        <label>units.hpp</label>
        <link refid="libhal_2units_8hpp_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>optional</label>
      </node>
      <node id="18">
        <label>as_bytes.hpp</label>
        <link refid="as__bytes_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>boost/leaf.hpp</label>
      </node>
      <node id="21">
        <label>array</label>
      </node>
      <node id="5">
        <label>libhal/error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cstddef</label>
      </node>
      <node id="13">
        <label>chrono</label>
      </node>
      <node id="8">
        <label>libhal/serial.hpp</label>
        <link refid="libhal_2serial_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>concepts</label>
      </node>
      <node id="3">
        <label>span</label>
      </node>
      <node id="20">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacehal">hal</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2023<sp/>Google<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;span&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string_view&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libhal/error.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libhal/serial.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="libhal_2timeout_8hpp" kindref="compound">libhal/timeout.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libhal/units.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;as_bytes.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;comparison.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="math_8hpp" kindref="compound">math.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehal" kindref="compound">hal</ref><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>serial::settings&amp;<sp/>p_lhs,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>serial::settings&amp;<sp/>p_rhs)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehal_1a672dc7a38be09e228336cb3e7db942d9" kindref="member">equals</ref>(p_lhs.baud_rate,<sp/>p_rhs.baud_rate)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_lhs.parity<sp/>==<sp/>p_rhs.parity<sp/>&amp;&amp;<sp/>p_lhs.stop<sp/>==<sp/>p_rhs.stop;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46" refid="namespacehal_1ab8a558a4de3cc35cbb1ce1d36b87fb08" refkind="member"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>result&lt;serial::write_t&gt;<sp/><ref refid="namespacehal_1ab8a558a4de3cc35cbb1ce1d36b87fb08" kindref="member">write_partial</ref>(</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1serial" kindref="compound">serial</ref>&amp;<sp/>p_serial,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>std::span&lt;const<sp/>hal::byte&gt;<sp/>p_data_out)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_serial.<ref refid="classhal_1_1serial_1a9a7a63f71b908b9c3cd061c52df55df8" kindref="member">write</ref>(p_data_out);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="namespacehal_1a5adac281f53817b947fe1081f0acdba2" refkind="member"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>status<sp/><ref refid="namespacehal_1a589504d8349443cb5a9ed2caa02dcbe1" kindref="member">write</ref>(<ref refid="classhal_1_1serial" kindref="compound">serial</ref>&amp;<sp/>p_serial,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::span&lt;const<sp/>hal::byte&gt;<sp/>p_data_out)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>remaining<sp/>=<sp/>p_data_out;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(remaining.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>write_length<sp/>=<sp/>HAL_CHECK(p_serial.<ref refid="classhal_1_1serial_1a9a7a63f71b908b9c3cd061c52df55df8" kindref="member">write</ref>(remaining)).data.size();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>remaining<sp/>=<sp/>remaining.subspan(write_length);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehal_1a557593a710d85719fff67b743268293a" kindref="member">success</ref>();</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="namespacehal_1a75449d82173a1cef5d93b2dc98117c01" refkind="member"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>status<sp/><ref refid="namespacehal_1a589504d8349443cb5a9ed2caa02dcbe1" kindref="member">write</ref>(<ref refid="classhal_1_1serial" kindref="compound">serial</ref>&amp;<sp/>p_serial,<sp/>std::string_view<sp/>p_data_out)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehal_1a589504d8349443cb5a9ed2caa02dcbe1" kindref="member">write</ref>(p_serial,<sp/>as_bytes(p_data_out));</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>result&lt;std::span&lt;hal::byte&gt;&gt;</highlight></codeline>
<codeline lineno="98" refid="namespacehal_1a3c7c3cc287602089caf9b6d0a7c7fa09" refkind="member"><highlight class="normal"><ref refid="namespacehal_1a5164defc44fc09c44d77d1ff823998eb" kindref="member">read</ref>(<ref refid="classhal_1_1serial" kindref="compound">serial</ref>&amp;<sp/>p_serial,<sp/>std::span&lt;hal::byte&gt;<sp/>p_data_in,<sp/>timeout<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p_timeout)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>remaining<sp/>=<sp/>p_data_in;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(remaining.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>read_length<sp/>=<sp/>HAL_CHECK(p_serial.<ref refid="classhal_1_1serial_1a69eaa352ef24788b38d36648a5c3f99f" kindref="member">read</ref>(remaining)).data.size();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>remaining<sp/>=<sp/>remaining.subspan(read_length);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_CHECK(p_timeout());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_data_in;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>BytesToRead&gt;</highlight></codeline>
<codeline lineno="127" refid="namespacehal_1aeff335b1772500b809022e6b9d3394d5" refkind="member"><highlight class="normal">[[nodiscard]]<sp/>result&lt;std::array&lt;hal::byte,<sp/>BytesToRead&gt;&gt;<sp/><ref refid="namespacehal_1a5164defc44fc09c44d77d1ff823998eb" kindref="member">read</ref>(</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1serial" kindref="compound">serial</ref>&amp;<sp/>p_serial,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>timeout<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p_timeout)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>std::array&lt;hal::byte,<sp/>BytesToRead&gt;<sp/>buffer;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>HAL_CHECK(<ref refid="namespacehal_1a5164defc44fc09c44d77d1ff823998eb" kindref="member">read</ref>(p_serial,<sp/>buffer,<sp/>p_timeout));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="namespacehal_1a0af54ac1728b8461ace875aac1ef022b" refkind="member"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>result&lt;std::span&lt;hal::byte&gt;&gt;<sp/><ref refid="namespacehal_1a3120e8d9eff19d2010c7ffa47b739d59" kindref="member">write_then_read</ref>(</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1serial" kindref="compound">serial</ref>&amp;<sp/>p_serial,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>std::span&lt;const<sp/>hal::byte&gt;<sp/>p_data_out,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>std::span&lt;hal::byte&gt;<sp/>p_data_in,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>timeout<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p_timeout)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>HAL_CHECK(<ref refid="namespacehal_1ab8a558a4de3cc35cbb1ce1d36b87fb08" kindref="member">write_partial</ref>(p_serial,<sp/>p_data_out));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehal_1a5164defc44fc09c44d77d1ff823998eb" kindref="member">read</ref>(p_serial,<sp/>p_data_in,<sp/>p_timeout);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>BytesToRead&gt;</highlight></codeline>
<codeline lineno="176" refid="namespacehal_1a41426e8c1ab23ed544215ea068477c13" refkind="member"><highlight class="normal">[[nodiscard]]<sp/>result&lt;std::array&lt;hal::byte,<sp/>BytesToRead&gt;&gt;<sp/><ref refid="namespacehal_1a3120e8d9eff19d2010c7ffa47b739d59" kindref="member">write_then_read</ref>(</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1serial" kindref="compound">serial</ref>&amp;<sp/>p_serial,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>std::span&lt;const<sp/>hal::byte&gt;<sp/>p_data_out,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>timeout<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p_timeout)</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>std::array&lt;hal::byte,<sp/>BytesToRead&gt;<sp/>buffer;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>HAL_CHECK(<ref refid="namespacehal_1a3120e8d9eff19d2010c7ffa47b739d59" kindref="member">write_then_read</ref>(p_serial,<sp/>p_data_out,<sp/>buffer,<sp/>p_timeout));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DataArray&gt;</highlight></codeline>
<codeline lineno="197" refid="namespacehal_1a299699f3b19c4ab26cbb91c7e6273a30" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacehal_1a299699f3b19c4ab26cbb91c7e6273a30" kindref="member">print</ref>(<ref refid="classhal_1_1serial" kindref="compound">serial</ref>&amp;<sp/>p_serial,<sp/>DataArray&amp;&amp;<sp/>p_data)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>(void)<ref refid="namespacehal_1a589504d8349443cb5a9ed2caa02dcbe1" kindref="member">hal::write</ref>(p_serial,<sp/>p_data);</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>BufferSize,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Parameters&gt;</highlight></codeline>
<codeline lineno="220" refid="namespacehal_1a39a93c6f5e9a2a3dd6f72c6fa122a7f6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacehal_1a299699f3b19c4ab26cbb91c7e6273a30" kindref="member">print</ref>(<ref refid="classhal_1_1serial" kindref="compound">serial</ref>&amp;<sp/>p_serial,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p_format,<sp/>Parameters...<sp/>p_parameters)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>static_assert(BufferSize<sp/>&gt;<sp/>2);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>std::array&lt;char,<sp/>BufferSize&gt;<sp/>buffer{};</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unterminated_max_string_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(BufferSize)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>std::snprintf(buffer.data(),<sp/>buffer.size(),<sp/>p_format,<sp/>p_parameters...);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;<sp/>unterminated_max_string_size)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>out<sp/>what<sp/>was<sp/>able<sp/>to<sp/>be<sp/>written<sp/>to<sp/>the<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>unterminated_max_string_size;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>(void)<ref refid="namespacehal_1a589504d8349443cb5a9ed2caa02dcbe1" kindref="member">hal::write</ref>(p_serial,<sp/>std::string_view(buffer.data(),<sp/>length));</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hal</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="libraries/include/libhal-util/serial.hpp"/>
  </compounddef>
</doxygen>
