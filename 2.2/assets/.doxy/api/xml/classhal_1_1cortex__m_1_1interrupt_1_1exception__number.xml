<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhal_1_1cortex__m_1_1interrupt_1_1exception__number" kind="class" language="C++" prot="public">
    <compoundname>hal::cortex_m::interrupt::exception_number</compoundname>
    <includes refid="interrupt_8hpp" local="no">interrupt.hpp</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a2d19aa1cf7edb91bdc7a8d16b2a5b2d4" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t hal::cortex_m::interrupt::exception_number::index_position</definition>
        <argsstring></argsstring>
        <name>index_position</name>
        <initializer>= 5</initializer>
        <briefdescription>
<para>Bits 5 and above represent which 32-bit word in the iser and icer arrays IRQs enable bit resides. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="65" column="31" bodyfile="libraries/include/libhal-armcortex/interrupt.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1acb93f52a6f6e478f76accd06fb20a6f9" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t hal::cortex_m::interrupt::exception_number::enable_mask_code</definition>
        <argsstring></argsstring>
        <name>enable_mask_code</name>
        <initializer>= 0x1F</initializer>
        <briefdescription>
<para>Lower 5 bits indicate which bit within the 32-bit word is the enable bit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="72" column="31" bodyfile="libraries/include/libhal-armcortex/interrupt.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a637537597d56e5453def63b17715130e" prot="private" static="no" mutable="no">
        <type>std::uint16_t</type>
        <definition>std::uint16_t hal::cortex_m::interrupt::exception_number::m_id</definition>
        <argsstring></argsstring>
        <name>m_id</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="144" column="19" bodyfile="libraries/include/libhal-armcortex/interrupt.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a5133b258b38fe723f6a40aaaad41f641" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hal::cortex_m::interrupt::exception_number::exception_number</definition>
        <argsstring>(std::uint16_t p_id)</argsstring>
        <name>exception_number</name>
        <param>
          <type>std::uint16_t</type>
          <declname>p_id</declname>
        </param>
        <briefdescription>
<para>construct an <ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number" kindref="compound">exception_number</ref> from an int </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_id</parametername>
</parameternamelist>
<parameterdescription>
<para>- interrupt request number. If this value is beyond the bounds of the interrupt vector table, meaning it is an invalid exception number, then all operations will do nothing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="52" column="15" bodyfile="libraries/include/libhal-armcortex/interrupt.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a58833c3b146eb474b21c687cf6338d8c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr hal::cortex_m::interrupt::exception_number::exception_number</definition>
        <argsstring>(exception_number &amp;p_id)=default</argsstring>
        <name>exception_number</name>
        <param>
          <type><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number" kindref="compound">exception_number</ref> &amp;</type>
          <declname>p_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="57" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a7c09da49c2ebe2d8dab96fba584c0fcf" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number" kindref="compound">exception_number</ref> &amp;</type>
        <definition>constexpr exception_number&amp; hal::cortex_m::interrupt::exception_number::operator=</definition>
        <argsstring>(exception_number &amp;p_id)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number" kindref="compound">exception_number</ref> &amp;</type>
          <declname>p_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="58" column="32"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a2c1a386b8b6c56233e42c1a25c2bec8b" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool hal::cortex_m::interrupt::exception_number::default_enabled</definition>
        <argsstring>() const</argsstring>
        <name>default_enabled</name>
        <briefdescription>
<para>Determines if the irq is within the range of ARM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true - irq is enabled by default </para>
</simplesect>
<simplesect kind="return"><para>false - irq must be enabled to work </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="80" column="21" bodyfile="libraries/include/libhal-armcortex/interrupt.hpp" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a235c58fe8961d42b0858586244f10733" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr std::uint32_t</type>
        <definition>constexpr std::uint32_t hal::cortex_m::interrupt::exception_number::to_irq_number</definition>
        <argsstring>() const</argsstring>
        <name>to_irq_number</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="85" column="30" bodyfile="libraries/include/libhal-armcortex/interrupt.hpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1afc52160c2f7590fc4794a570927704f3" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr std::uint32_t</type>
        <definition>constexpr std::uint32_t hal::cortex_m::interrupt::exception_number::register_index</definition>
        <argsstring>() const</argsstring>
        <name>register_index</name>
        <briefdescription>
<para>the enable bit for this interrupt resides within one of the 32-bit registers within the &quot;iser&quot; and &quot;icer&quot; arrays. This function will return the index of which 32-bit register contains the enable bit. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>constexpr std::uint32_t - array index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="97" column="30" bodyfile="libraries/include/libhal-armcortex/interrupt.hpp" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1ab578110f924967ae33f22cbde05074c9" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr std::uint32_t</type>
        <definition>constexpr std::uint32_t hal::cortex_m::interrupt::exception_number::enable_mask</definition>
        <argsstring>() const</argsstring>
        <name>enable_mask</name>
        <briefdescription>
<para>return a mask with a 1 bit in the enable position for this <ref refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number" kindref="compound">exception_number</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>constexpr std::uint32_t - enable mask </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="108" column="30" bodyfile="libraries/include/libhal-armcortex/interrupt.hpp" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a7c479095d277bf828a04e8be88f3a5d9" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr size_t</type>
        <definition>constexpr size_t hal::cortex_m::interrupt::exception_number::vector_index</definition>
        <argsstring>() const</argsstring>
        <name>vector_index</name>
        <briefdescription>
<para>Provides the index within the IVT. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>constexpr size_t - the index position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="118" column="23" bodyfile="libraries/include/libhal-armcortex/interrupt.hpp" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a1426aeeb60a194921dc9f1450e7f581d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hal::cortex_m::interrupt::exception_number::is_valid</definition>
        <argsstring>() const</argsstring>
        <name>is_valid</name>
        <briefdescription>
<para>determines if the irq is within bounds of the interrupt vector table. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true - is a valid interrupt for this system </para>
</simplesect>
<simplesect kind="return"><para>false - this interrupt is beyond the range of valid interrupts </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="130" column="11" bodyfile="libraries/include/libhal-armcortex/interrupt.hpp" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a0ac09662e4a28fad8d7b7a97ad3a1d0f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr std::uint16_t</type>
        <definition>constexpr std::uint16_t hal::cortex_m::interrupt::exception_number::get_event_number</definition>
        <argsstring>()</argsstring>
        <name>get_event_number</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>constexpr std::uint16_t - the interrupt request number </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="138" column="30" bodyfile="libraries/include/libhal-armcortex/interrupt.hpp" bodystart="138" bodyend="141"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>represents an interrupt request number along with helper functions for setting up the interrupt controller registers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/include/libhal-armcortex/interrupt.hpp" line="42" column="3" bodyfile="libraries/include/libhal-armcortex/interrupt.hpp" bodystart="43" bodyend="145"/>
    <listofallmembers>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a2c1a386b8b6c56233e42c1a25c2bec8b" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt::exception_number</scope><name>default_enabled</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1ab578110f924967ae33f22cbde05074c9" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt::exception_number</scope><name>enable_mask</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1acb93f52a6f6e478f76accd06fb20a6f9" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt::exception_number</scope><name>enable_mask_code</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a5133b258b38fe723f6a40aaaad41f641" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt::exception_number</scope><name>exception_number</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a58833c3b146eb474b21c687cf6338d8c" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt::exception_number</scope><name>exception_number</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a0ac09662e4a28fad8d7b7a97ad3a1d0f" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt::exception_number</scope><name>get_event_number</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a2d19aa1cf7edb91bdc7a8d16b2a5b2d4" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt::exception_number</scope><name>index_position</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a1426aeeb60a194921dc9f1450e7f581d" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt::exception_number</scope><name>is_valid</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a637537597d56e5453def63b17715130e" prot="private" virt="non-virtual"><scope>hal::cortex_m::interrupt::exception_number</scope><name>m_id</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a7c09da49c2ebe2d8dab96fba584c0fcf" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt::exception_number</scope><name>operator=</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1afc52160c2f7590fc4794a570927704f3" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt::exception_number</scope><name>register_index</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a235c58fe8961d42b0858586244f10733" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt::exception_number</scope><name>to_irq_number</name></member>
      <member refid="classhal_1_1cortex__m_1_1interrupt_1_1exception__number_1a7c479095d277bf828a04e8be88f3a5d9" prot="public" virt="non-virtual"><scope>hal::cortex_m::interrupt::exception_number</scope><name>vector_index</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
