<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="can__router_8hpp" kind="file" language="C++">
    <compoundname>can_router.hpp</compoundname>
    <includes refid="static__list_8hpp" local="no">libhal-util/static_list.hpp</includes>
    <includes refid="libhal_2can_8hpp" local="no">libhal/can.hpp</includes>
    <includedby refid="drc_8hpp" local="no">libraries/include/libhal-rmd/drc.hpp</includedby>
    <includedby refid="mc__x_8hpp" local="no">libraries/include/libhal-rmd/mc_x.hpp</includedby>
    <incdepgraph>
      <node id="10">
        <label>system_error</label>
      </node>
      <node id="5">
        <label>iterator</label>
      </node>
      <node id="2">
        <label>libhal-util/static_list.hpp</label>
        <link refid="static__list_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cstdint</label>
      </node>
      <node id="14">
        <label>tl/function_ref.hpp</label>
      </node>
      <node id="11">
        <label>boost/leaf/detail/all.hpp</label>
      </node>
      <node id="13">
        <label>third_party/inplace_function.hpp</label>
      </node>
      <node id="12">
        <label>functional.hpp</label>
        <link refid="functional_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>units.hpp</label>
        <link refid="libhal_2units_8hpp_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>utility</label>
      </node>
      <node id="8">
        <label>array</label>
      </node>
      <node id="9">
        <label>error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cstddef</label>
      </node>
      <node id="16">
        <label>chrono</label>
      </node>
      <node id="1">
        <label>libraries/include/libhal-canrouter/can_router.hpp</label>
        <link refid="can__router_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>libhal/can.hpp</label>
        <link refid="libhal_2can_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>libraries/include/libhal-rmd/drc.hpp</label>
        <link refid="drc_8hpp_source"/>
      </node>
      <node id="3">
        <label>libraries/include/libhal-rmd/mc_x.hpp</label>
        <link refid="mc__x_8hpp_source"/>
      </node>
      <node id="1">
        <label>libraries/include/libhal-canrouter/can_router.hpp</label>
        <link refid="can__router_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classhal_1_1can__router" prot="public">hal::can_router</innerclass>
    <innerclass refid="structhal_1_1can__router_1_1route" prot="public">hal::can_router::route</innerclass>
    <innernamespace refid="namespacehal">hal</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2023<sp/>Google<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libhal-util/static_list.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libhal/can.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehal" kindref="compound">hal</ref><sp/>{</highlight></codeline>
<codeline lineno="25" refid="classhal_1_1can__router" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhal_1_1can__router" kindref="compound">can_router</ref></highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>noop<sp/>=</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>[]([[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1can_1_1message__t" kindref="compound">can::message_t</ref>&amp;<sp/>p_message)<sp/>{};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>message_handler<sp/>=<sp/><ref refid="namespacehal_1a6051b44bfb2759cbcdba16019f3f1550" kindref="member">hal::callback&lt;hal::can::handler&gt;</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="structhal_1_1can__router_1_1route" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhal_1_1can__router_1_1route" kindref="compound">route</ref></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhal_1_1can_1ae85571b4f7aac93fca8503aafcb32a47" kindref="member">hal::can::id_t</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>message_handler<sp/>handler<sp/>=<sp/>noop;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>route_item<sp/>=<sp/><ref refid="classhal_1_1static__list" kindref="compound">static_list&lt;route&gt;::item</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>result&lt;can_router&gt;<sp/>create(<ref refid="classhal_1_1can" kindref="compound">hal::can</ref>&amp;<sp/>p_can);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classhal_1_1can__router_1ad02c34a2e40661e54ef436f72c9023bd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classhal_1_1can__router_1ad02c34a2e40661e54ef436f72c9023bd" kindref="member">can_router</ref>(<ref refid="classhal_1_1can" kindref="compound">hal::can</ref>&amp;<sp/>p_can);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1can__router" kindref="compound">can_router</ref>()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1can__router" kindref="compound">can_router</ref>(<ref refid="classhal_1_1can__router" kindref="compound">can_router</ref>&amp;<sp/>p_other)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1can__router" kindref="compound">can_router</ref>&amp;<sp/>operator=(<ref refid="classhal_1_1can__router" kindref="compound">can_router</ref>&amp;<sp/>p_other)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1can__router" kindref="compound">can_router</ref>&amp;<sp/>operator=(<ref refid="classhal_1_1can__router" kindref="compound">can_router</ref>&amp;&amp;<sp/>p_other)<sp/>noexcept;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1can__router" kindref="compound">can_router</ref>(<ref refid="classhal_1_1can__router" kindref="compound">can_router</ref>&amp;&amp;<sp/>p_other)<sp/>noexcept;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>~<ref refid="classhal_1_1can__router" kindref="compound">can_router</ref>();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="classhal_1_1can__router_1ab6b26bb11677dd6950defb796e222e66" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/><ref refid="classhal_1_1can" kindref="compound">hal::can</ref>&amp;<sp/><ref refid="classhal_1_1can__router_1ab6b26bb11677dd6950defb796e222e66" kindref="member">bus</ref>();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="classhal_1_1can__router_1a819ef31520e6e63081250e259f1541d4" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/><ref refid="classhal_1_1static__list" kindref="compound">static_list&lt;route&gt;::item</ref><sp/><ref refid="classhal_1_1can__router_1a819ef31520e6e63081250e259f1541d4" kindref="member">add_message_callback</ref>(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhal_1_1can_1ae85571b4f7aac93fca8503aafcb32a47" kindref="member">hal::can::id_t</ref><sp/>p_id);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="classhal_1_1can__router_1a94c5cb3f091e516c7aa2068a99bc108c" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/><ref refid="classhal_1_1static__list" kindref="compound">static_list&lt;route&gt;::item</ref><sp/><ref refid="classhal_1_1can__router_1a94c5cb3f091e516c7aa2068a99bc108c" kindref="member">add_message_callback</ref>(</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhal_1_1can_1ae85571b4f7aac93fca8503aafcb32a47" kindref="member">hal::can::id_t</ref><sp/>p_id,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>message_handler<sp/>p_handler);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="classhal_1_1can__router_1a63f6824645637c114dc0ba8ffa782a2b" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classhal_1_1static__list" kindref="compound">static_list&lt;route&gt;</ref>&amp;<sp/><ref refid="classhal_1_1can__router_1a63f6824645637c114dc0ba8ffa782a2b" kindref="member">handlers</ref>();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="classhal_1_1can__router_1a6227960a0c4bf5a59f3b430783aa35fb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhal_1_1can__router_1a6227960a0c4bf5a59f3b430783aa35fb" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1can_1_1message__t" kindref="compound">can::message_t</ref>&amp;<sp/>p_message);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1static__list" kindref="compound">static_list&lt;route&gt;</ref><sp/>m_handlers{};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1can" kindref="compound">hal::can</ref>*<sp/>m_can<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">};</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hal</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="libraries/include/libhal-canrouter/can_router.hpp"/>
  </compounddef>
</doxygen>
