<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structhal_1_1mock_1_1timer" kind="struct" language="C++" prot="public">
    <compoundname>hal::mock::timer</compoundname>
    <basecompoundref refid="classhal_1_1timer" prot="public" virt="non-virtual">hal::timer</basecompoundref>
    <includes refid="libhal-mock_2timer_8hpp" local="no">timer.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structhal_1_1mock_1_1timer_1a2e1c6b0ef7b623566c2af9777b29f6ea" prot="public" static="no" mutable="no">
        <type><ref refid="classhal_1_1spy__handler" kindref="compound">spy_handler</ref>&lt; std::function&lt; void(void)&gt;, std::chrono::nanoseconds &gt;</type>
        <definition>spy_handler&lt;std::function&lt;void(void)&gt;, std::chrono::nanoseconds&gt; hal::mock::timer::spy_schedule</definition>
        <argsstring></argsstring>
        <name>spy_schedule</name>
        <briefdescription>
<para>Spy handler for <ref refid="classhal_1_1timer_1a992234ed828ee9fac8b06ae4d0b8f83c" kindref="member">hal::timer::schedule()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-mock/timer.hpp" line="41" column="15" bodyfile="libraries/include/libhal-mock/timer.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhal_1_1mock_1_1timer_1a8680004b0a1293f2633246dfbc872a34" prot="public" static="no" mutable="no">
        <type><ref refid="classhal_1_1spy__handler" kindref="compound">spy_handler</ref>&lt; bool &gt;</type>
        <definition>spy_handler&lt;bool&gt; hal::mock::timer::spy_is_running</definition>
        <argsstring></argsstring>
        <name>spy_is_running</name>
        <briefdescription>
<para>Spy handler for <ref refid="classhal_1_1timer_1aa31f569c3165567f24920a06736d57ba" kindref="member">hal::timer::is_running()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-mock/timer.hpp" line="43" column="15" bodyfile="libraries/include/libhal-mock/timer.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhal_1_1mock_1_1timer_1ac37c36675cc7ee2986cc9ca0acd9b037" prot="public" static="no" mutable="no">
        <type><ref refid="classhal_1_1spy__handler" kindref="compound">spy_handler</ref>&lt; bool &gt;</type>
        <definition>spy_handler&lt;bool&gt; hal::mock::timer::spy_cancel</definition>
        <argsstring></argsstring>
        <name>spy_cancel</name>
        <briefdescription>
<para>Spy handler for hal::timer::clear() </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-mock/timer.hpp" line="45" column="15" bodyfile="libraries/include/libhal-mock/timer.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structhal_1_1mock_1_1timer_1a2a9da745d20b98b2f7b89ab9263d5c44" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool hal::mock::timer::m_is_running</definition>
        <argsstring></argsstring>
        <name>m_is_running</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-mock/timer.hpp" line="74" column="8" bodyfile="libraries/include/libhal-mock/timer.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structhal_1_1mock_1_1timer_1a9d3f61fc844e2939b380e887c4f9bdd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hal::mock::timer::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Reset spy information for <ref refid="classhal_1_1timer_1a992234ed828ee9fac8b06ae4d0b8f83c" kindref="member">schedule()</ref>, clear(), and <ref refid="classhal_1_1timer_1aa31f569c3165567f24920a06736d57ba" kindref="member">is_running()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-mock/timer.hpp" line="33" column="8" bodyfile="libraries/include/libhal-mock/timer.hpp" bodystart="33" bodyend="38"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structhal_1_1mock_1_1timer_1ab1933a77ff0df4a98dd9ad9c76711cf3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>result&lt; <ref refid="structhal_1_1timer_1_1schedule__t" kindref="compound">schedule_t</ref> &gt;</type>
        <definition>result&lt;schedule_t&gt; hal::mock::timer::driver_schedule</definition>
        <argsstring>(hal::callback&lt; void(void)&gt; p_callback, std::chrono::nanoseconds p_delay) override</argsstring>
        <name>driver_schedule</name>
        <reimplements refid="classhal_1_1timer_1a9696735ea2247cd7924cbc4774fcddd7">driver_schedule</reimplements>
        <param>
          <type>hal::callback&lt; void(void)&gt;</type>
          <declname>p_callback</declname>
        </param>
        <param>
          <type>std::chrono::nanoseconds</type>
          <declname>p_delay</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-mock/timer.hpp" line="48" column="10" bodyfile="libraries/include/libhal-mock/timer.hpp" bodystart="48" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="structhal_1_1mock_1_1timer_1ac010601ff5449c11b03d68d669bfe3ed" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>result&lt; <ref refid="structhal_1_1timer_1_1is__running__t" kindref="compound">is_running_t</ref> &gt;</type>
        <definition>result&lt;is_running_t&gt; hal::mock::timer::driver_is_running</definition>
        <argsstring>() override</argsstring>
        <name>driver_is_running</name>
        <reimplements refid="classhal_1_1timer_1ac28b122b4b6f929a98fbaea8c23f786a">driver_is_running</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-mock/timer.hpp" line="56" column="10" bodyfile="libraries/include/libhal-mock/timer.hpp" bodystart="56" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="structhal_1_1mock_1_1timer_1ae8144b24739ac9584433432a25326364" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>result&lt; <ref refid="structhal_1_1timer_1_1cancel__t" kindref="compound">cancel_t</ref> &gt;</type>
        <definition>result&lt;cancel_t&gt; hal::mock::timer::driver_cancel</definition>
        <argsstring>() override</argsstring>
        <name>driver_cancel</name>
        <reimplements refid="classhal_1_1timer_1a273b708a1f149479290444f10d82b4fa">driver_cancel</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-mock/timer.hpp" line="65" column="10" bodyfile="libraries/include/libhal-mock/timer.hpp" bodystart="65" bodyend="72"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Mock timer implementation for use in unit tests and simulations with spy functions for <ref refid="classhal_1_1timer_1a992234ed828ee9fac8b06ae4d0b8f83c" kindref="member">schedule()</ref>, clear(), and <ref refid="classhal_1_1timer_1aa31f569c3165567f24920a06736d57ba" kindref="member">is_running()</ref> </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>hal::mock::timer</label>
        <link refid="structhal_1_1mock_1_1timer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>hal::timer</label>
        <link refid="classhal_1_1timer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>hal::spy_handler&lt; std::function&lt; void(void)&gt;, std::chrono::nanoseconds &gt;</label>
        <link refid="classhal_1_1spy__handler"/>
      </node>
      <node id="3">
        <label>hal::spy_handler&lt; bool &gt;</label>
        <link refid="classhal_1_1spy__handler"/>
      </node>
      <node id="1">
        <label>hal::mock::timer</label>
        <link refid="structhal_1_1mock_1_1timer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>spy_cancel</edgelabel>
          <edgelabel>spy_is_running</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>spy_schedule</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>hal::timer</label>
        <link refid="classhal_1_1timer"/>
      </node>
    </collaborationgraph>
    <location file="libraries/include/libhal-mock/timer.hpp" line="27" column="1" bodyfile="libraries/include/libhal-mock/timer.hpp" bodystart="28" bodyend="75"/>
    <listofallmembers>
      <member refid="classhal_1_1timer_1a51c60a0ecd9c3e4b0871af671bdeac3e" prot="public" virt="non-virtual"><scope>hal::mock::timer</scope><name>cancel</name></member>
      <member refid="structhal_1_1mock_1_1timer_1ae8144b24739ac9584433432a25326364" prot="private" virt="virtual"><scope>hal::mock::timer</scope><name>driver_cancel</name></member>
      <member refid="structhal_1_1mock_1_1timer_1ac010601ff5449c11b03d68d669bfe3ed" prot="private" virt="virtual"><scope>hal::mock::timer</scope><name>driver_is_running</name></member>
      <member refid="structhal_1_1mock_1_1timer_1ab1933a77ff0df4a98dd9ad9c76711cf3" prot="private" virt="virtual"><scope>hal::mock::timer</scope><name>driver_schedule</name></member>
      <member refid="classhal_1_1timer_1aa31f569c3165567f24920a06736d57ba" prot="public" virt="non-virtual"><scope>hal::mock::timer</scope><name>is_running</name></member>
      <member refid="structhal_1_1mock_1_1timer_1a2a9da745d20b98b2f7b89ab9263d5c44" prot="private" virt="non-virtual"><scope>hal::mock::timer</scope><name>m_is_running</name></member>
      <member refid="structhal_1_1mock_1_1timer_1a9d3f61fc844e2939b380e887c4f9bdd4" prot="public" virt="non-virtual"><scope>hal::mock::timer</scope><name>reset</name></member>
      <member refid="classhal_1_1timer_1a992234ed828ee9fac8b06ae4d0b8f83c" prot="public" virt="non-virtual"><scope>hal::mock::timer</scope><name>schedule</name></member>
      <member refid="structhal_1_1mock_1_1timer_1ac37c36675cc7ee2986cc9ca0acd9b037" prot="public" virt="non-virtual"><scope>hal::mock::timer</scope><name>spy_cancel</name></member>
      <member refid="structhal_1_1mock_1_1timer_1a8680004b0a1293f2633246dfbc872a34" prot="public" virt="non-virtual"><scope>hal::mock::timer</scope><name>spy_is_running</name></member>
      <member refid="structhal_1_1mock_1_1timer_1a2e1c6b0ef7b623566c2af9777b29f6ea" prot="public" virt="non-virtual"><scope>hal::mock::timer</scope><name>spy_schedule</name></member>
      <member refid="classhal_1_1timer_1aebf27697c5512202ac99f8b0f159e441" prot="public" virt="virtual"><scope>hal::mock::timer</scope><name>~timer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
