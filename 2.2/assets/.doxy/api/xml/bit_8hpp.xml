<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="bit_8hpp" kind="file" language="C++">
    <compoundname>bit.hpp</compoundname>
    <includes local="no">concepts</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">limits</includes>
    <includedby refid="libhal-lpc40_2clock_8hpp" local="no">libraries/include/libhal-lpc40/clock.hpp</includedby>
    <incdepgraph>
      <node id="5">
        <label>limits</label>
      </node>
      <node id="4">
        <label>cstdint</label>
      </node>
      <node id="3">
        <label>cstddef</label>
      </node>
      <node id="2">
        <label>concepts</label>
      </node>
      <node id="1">
        <label>libraries/include/libhal-util/bit.hpp</label>
        <link refid="bit_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>libraries/include/libhal-lpc40/clock.hpp</label>
        <link refid="libhal-lpc40_2clock_8hpp_source"/>
      </node>
      <node id="1">
        <label>libraries/include/libhal-util/bit.hpp</label>
        <link refid="bit_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structhal_1_1bit__mask" prot="public">hal::bit_mask</innerclass>
    <innerclass refid="structhal_1_1byte__mask" prot="public">hal::byte_mask</innerclass>
    <innerclass refid="structhal_1_1nibble__mask" prot="public">hal::nibble_mask</innerclass>
    <innerclass refid="classhal_1_1bit__value" prot="public">hal::bit_value</innerclass>
    <innerclass refid="classhal_1_1bit__modify" prot="public">hal::bit_modify</innerclass>
    <innernamespace refid="namespacehal">hal</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2023<sp/>Google<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;concepts&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehal" kindref="compound">hal</ref><sp/>{</highlight></codeline>
<codeline lineno="27" refid="structhal_1_1bit__mask" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30" refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" refkind="member"><highlight class="normal"><sp/><sp/>std::uint32_t<sp/><ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref>;</highlight></codeline>
<codeline lineno="32" refid="structhal_1_1bit__mask_1ac77551388b9af88426b01c6516915f28" refkind="member"><highlight class="normal"><sp/><sp/>std::uint32_t<sp/><ref refid="structhal_1_1bit__mask_1ac77551388b9af88426b01c6516915f28" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">32_t<sp/>position1,<sp/>std::u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">32_t<sp/>position2&gt;</highlight></codeline>
<codeline lineno="50" refid="structhal_1_1bit__mask_1aac23bb0f62776d60f0aa52f3e223c361" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>consteval<sp/><ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref><sp/><ref refid="structhal_1_1bit__mask_1aac23bb0f62776d60f0aa52f3e223c361" kindref="member">from</ref>()</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>std::uint32_t<sp/>plus_one<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(position1<sp/>&lt;<sp/>position2)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref>{<sp/>.<ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref><sp/>=<sp/>position1,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.width<sp/>=<sp/>plus_one<sp/>+<sp/>(position2<sp/>-<sp/>position1)<sp/>};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref>{<sp/>.<ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref><sp/>=<sp/>position2,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.width<sp/>=<sp/>plus_one<sp/>+<sp/>(position1<sp/>-<sp/>position2)<sp/>};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">32_t<sp/>position&gt;</highlight></codeline>
<codeline lineno="70" refid="structhal_1_1bit__mask_1a1d1e9a47bfe6261dfeb502d90407972e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref><sp/><ref refid="structhal_1_1bit__mask_1a1d1e9a47bfe6261dfeb502d90407972e" kindref="member">from</ref>()</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref>{<sp/>.<ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref><sp/>=<sp/><ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref>,<sp/>.width<sp/>=<sp/>1U<sp/>};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="structhal_1_1bit__mask_1a911d8d8ed3967dec718e51db7df81588" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>consteval<sp/><ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref><sp/><ref refid="structhal_1_1bit__mask_1a911d8d8ed3967dec718e51db7df81588" kindref="member">from</ref>(std::uint32_t<sp/>position1,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uint32_t<sp/>position2)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>std::uint32_t<sp/>plus_one<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(position1<sp/>&lt;<sp/>position2)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref>{<sp/>.<ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref><sp/>=<sp/>position1,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.width<sp/>=<sp/>plus_one<sp/>+<sp/>(position2<sp/>-<sp/>position1)<sp/>};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref>{<sp/>.<ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref><sp/>=<sp/>position2,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.width<sp/>=<sp/>plus_one<sp/>+<sp/>(position1<sp/>-<sp/>position2)<sp/>};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="structhal_1_1bit__mask_1ad577183d4f6139bcda795394f62db14b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref><sp/><ref refid="structhal_1_1bit__mask_1ad577183d4f6139bcda795394f62db14b" kindref="member">from</ref>(std::uint32_t<sp/><ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref>)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref>{<sp/>.<ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref><sp/>=<sp/><ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref>,<sp/>.width<sp/>=<sp/>1U<sp/>};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral<sp/>T&gt;</highlight></codeline>
<codeline lineno="133" refid="structhal_1_1bit__mask_1ab90f9216ed97b1496eb6da9952190bf6" refkind="member"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1bit__mask_1ab90f9216ed97b1496eb6da9952190bf6" kindref="member">origin</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="134"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>compile<sp/>time,<sp/>generate<sp/>variable<sp/>containing<sp/>all<sp/>1s<sp/>with<sp/>the<sp/>size<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>target<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>T<sp/>field_of_ones<sp/>=<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>compile<sp/>time<sp/>calculate<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>in<sp/>the<sp/>target<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>target_width<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>bit_mask<sp/>by<sp/>shifting<sp/>the<sp/>set<sp/>of<sp/>1s<sp/>down<sp/>so<sp/>that<sp/>the<sp/>number<sp/>of<sp/>1s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>bit<sp/>position<sp/>0<sp/>is<sp/>equal<sp/>to<sp/>the<sp/>width<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>mask_at_origin<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(field_of_ones<sp/>&gt;&gt;<sp/>(target_width<sp/>-<sp/><ref refid="structhal_1_1bit__mask_1ac77551388b9af88426b01c6516915f28" kindref="member">width</ref>));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mask_at_origin;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral<sp/>T&gt;</highlight></codeline>
<codeline lineno="166" refid="structhal_1_1bit__mask_1a6bc7e3171bf1e580426112fccc5f356b" refkind="member"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1bit__mask_1a6bc7e3171bf1e580426112fccc5f356b" kindref="member">value</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="167"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(origin&lt;T&gt;()<sp/>&lt;&lt;<sp/><ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="structhal_1_1bit__mask_1a339f15317e2775a1a531d7f9e5a86506" refkind="member"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1bit__mask_1a339f15317e2775a1a531d7f9e5a86506" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>other.<ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref><sp/>==<sp/><ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref><sp/>&amp;&amp;<sp/>other.<ref refid="structhal_1_1bit__mask_1ac77551388b9af88426b01c6516915f28" kindref="member">width</ref><sp/>==<sp/><ref refid="structhal_1_1bit__mask_1ac77551388b9af88426b01c6516915f28" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal">};</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ByteIndex&gt;</highlight></codeline>
<codeline lineno="190" refid="structhal_1_1byte__mask" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhal_1_1byte__mask" kindref="compound">byte_mask</ref></highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196" refid="structhal_1_1byte__mask_1aaa959316aac9d91674383200791e9264" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structhal_1_1bit__mask" kindref="compound">hal::bit_mask</ref><sp/><ref refid="structhal_1_1byte__mask_1aaa959316aac9d91674383200791e9264" kindref="member">value</ref>{<sp/>.<ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref><sp/>=<sp/>ByteIndex,<sp/>.width<sp/>=<sp/>8<sp/>};</highlight></codeline>
<codeline lineno="197"><highlight class="normal">};</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ByteIndex&gt;</highlight></codeline>
<codeline lineno="205" refid="namespacehal_1acebe6f78fdced7a5c5f23ec71169f682" refkind="member"><highlight class="normal">constexpr<sp/><ref refid="structhal_1_1bit__mask" kindref="compound">hal::bit_mask</ref><sp/><ref refid="namespacehal_1acebe6f78fdced7a5c5f23ec71169f682" kindref="member">byte_m</ref><sp/>=<sp/><ref refid="structhal_1_1byte__mask" kindref="compound">byte_mask&lt;ByteIndex&gt;::value</ref>;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NibbleIndex&gt;</highlight></codeline>
<codeline lineno="213" refid="structhal_1_1nibble__mask" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhal_1_1nibble__mask" kindref="compound">nibble_mask</ref></highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structhal_1_1bit__mask" kindref="compound">hal::bit_mask</ref><sp/>value{<sp/>.<ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref><sp/>=<sp/>NibbleIndex,<sp/>.width<sp/>=<sp/>4<sp/>};</highlight></codeline>
<codeline lineno="216"><highlight class="normal">};</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NibbleIndex&gt;</highlight></codeline>
<codeline lineno="224" refid="namespacehal_1a847bdf02a520d3f7f4a85a635b839d96" refkind="member"><highlight class="normal">constexpr<sp/><ref refid="structhal_1_1bit__mask" kindref="compound">hal::bit_mask</ref><sp/><ref refid="namespacehal_1a847bdf02a520d3f7f4a85a635b839d96" kindref="member">nibble_m</ref><sp/>=<sp/><ref refid="structhal_1_1nibble__mask" kindref="compound">nibble_mask&lt;NibbleIndex&gt;::value</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;bit_mask<sp/>field&gt;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bit_extract(std::unsigned_integral<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p_value)</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>decltype(p_value);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shift<sp/>desired<sp/>value<sp/>to<sp/>the<sp/>right<sp/>to<sp/>position<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shifted<sp/>=<sp/>p_value<sp/>&gt;&gt;<sp/>field.position;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mask<sp/>away<sp/>any<sp/>bits<sp/>left<sp/>of<sp/>the<sp/>value<sp/>based<sp/>on<sp/>the<sp/>field<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>masked<sp/>=<sp/>shifted<sp/>&amp;<sp/>field.origin&lt;T&gt;();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Leaving<sp/>only<sp/>the<sp/>desired<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(masked);</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bit_extract(bit_mask<sp/>p_field,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unsigned_integral<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p_value)</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>decltype(p_value);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shift<sp/>desired<sp/>value<sp/>to<sp/>the<sp/>right<sp/>to<sp/>position<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shifted<sp/>=<sp/>p_value<sp/>&gt;&gt;<sp/>p_field.position;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mask<sp/>away<sp/>any<sp/>bits<sp/>left<sp/>of<sp/>the<sp/>value<sp/>based<sp/>on<sp/>the<sp/>field<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>masked<sp/>=<sp/>shifted<sp/>&amp;<sp/>p_field.origin&lt;T&gt;();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Leaving<sp/>only<sp/>the<sp/>desired<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(masked);</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral<sp/>T&gt;</highlight></codeline>
<codeline lineno="251" refid="classhal_1_1bit__value" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhal_1_1bit__value" kindref="compound">bit_value</ref></highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>std::uint32_t<sp/>width<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>constexpr<sp/><ref refid="classhal_1_1bit__value" kindref="compound">bit_value</ref>(T<sp/>p_initial_value<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_value(p_initial_value)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;bit_mask<sp/>field&gt;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>set()</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(field.position<sp/>&lt;<sp/>width,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bit<sp/>position<sp/>exceeds<sp/>register<sp/>width&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mask<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1U<sp/>&lt;&lt;<sp/>field.position);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>m_value<sp/>=<sp/>m_value<sp/>|<sp/>mask;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>set(<ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref><sp/>p_field)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mask<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1U<sp/>&lt;&lt;<sp/>p_field.<ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>m_value<sp/>=<sp/>m_value<sp/>|<sp/>mask;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;bit_mask<sp/>field&gt;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>clear()</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(field.position<sp/>&lt;<sp/>width,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bit<sp/>position<sp/>exceeds<sp/>register<sp/>width&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mask<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1U<sp/>&lt;&lt;<sp/>field.position);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inverted_mask<sp/>=<sp/>~mask;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>m_value<sp/>=<sp/>m_value<sp/>&amp;<sp/>inverted_mask;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>clear(<ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref><sp/>p_field)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mask<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1U<sp/>&lt;&lt;<sp/>p_field.<ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inverted_mask<sp/>=<sp/>~mask;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>m_value<sp/>=<sp/>m_value<sp/>&amp;<sp/>inverted_mask;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;bit_mask<sp/>field&gt;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>toggle()</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(field.position<sp/>&lt;<sp/>width,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Bit<sp/>position<sp/>exceeds<sp/>register<sp/>width&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mask<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1U<sp/>&lt;&lt;<sp/>field.position);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>m_value<sp/>=<sp/>m_value<sp/>^<sp/>mask;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>toggle(<ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref><sp/>p_field)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mask<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1U<sp/>&lt;&lt;<sp/>p_field.<ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>m_value<sp/>=<sp/>m_value<sp/>^<sp/>mask;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;bit_mask<sp/>field&gt;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>insert(std::unsigned_integral<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p_value)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value_to_insert<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p_value);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AND<sp/>value<sp/>with<sp/>mask<sp/>to<sp/>remove<sp/>any<sp/>bits<sp/>beyond<sp/>the<sp/>specified<sp/>width.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shift<sp/>masked<sp/>value<sp/>into<sp/>bit<sp/>position<sp/>and<sp/>OR<sp/>with<sp/>target<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shifted_field<sp/>=<sp/>value_to_insert<sp/>&lt;&lt;<sp/>field.position;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_value<sp/>=<sp/>shifted_field<sp/>&amp;<sp/>field.value&lt;T&gt;();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>width&apos;s<sp/>number<sp/>of<sp/>bits<sp/>in<sp/>the<sp/>target<sp/>value<sp/>at<sp/>the<sp/>bit<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>m_value<sp/>=<sp/>m_value<sp/>&amp;<sp/>~field.value&lt;T&gt;();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>m_value<sp/>=<sp/>m_value<sp/>|<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(new_value);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>insert(<ref refid="structhal_1_1bit__mask" kindref="compound">bit_mask</ref><sp/>p_field,<sp/>std::unsigned_integral<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p_value)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AND<sp/>value<sp/>with<sp/>mask<sp/>to<sp/>remove<sp/>any<sp/>bits<sp/>beyond<sp/>the<sp/>specified<sp/>width.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shift<sp/>masked<sp/>value<sp/>into<sp/>bit<sp/>position<sp/>and<sp/>OR<sp/>with<sp/>target<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shifted_field<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p_value)<sp/>&lt;&lt;<sp/>p_field.<ref refid="structhal_1_1bit__mask_1adf4a1e80d6bf6615bc301ed1db1743db" kindref="member">position</ref>;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_value<sp/>=<sp/>shifted_field<sp/>&amp;<sp/>p_field.<ref refid="structhal_1_1bit__mask_1a6bc7e3171bf1e580426112fccc5f356b" kindref="member">value</ref>&lt;T&gt;();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>width&apos;s<sp/>number<sp/>of<sp/>bits<sp/>in<sp/>the<sp/>target<sp/>value<sp/>at<sp/>the<sp/>bit<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>m_value<sp/>=<sp/>m_value<sp/>&amp;<sp/>~p_field.<ref refid="structhal_1_1bit__mask_1a6bc7e3171bf1e580426112fccc5f356b" kindref="member">value</ref>&lt;T&gt;();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>m_value<sp/>=<sp/>m_value<sp/>|<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(new_value);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral<sp/>U&gt;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to()</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">U</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_value);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>T<sp/>get()</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_value;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>T<sp/>m_value;</highlight></codeline>
<codeline lineno="372"><highlight class="normal">};</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral<sp/>T&gt;</highlight></codeline>
<codeline lineno="375" refid="classhal_1_1bit__modify" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhal_1_1bit__modify" kindref="compound">bit_modify</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classhal_1_1bit__value" kindref="compound">bit_value</ref>&lt;T&gt;</highlight></codeline>
<codeline lineno="376"><highlight class="normal">{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>constexpr<sp/><ref refid="classhal_1_1bit__modify" kindref="compound">bit_modify</ref>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>T&amp;<sp/>p_register_reference)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classhal_1_1bit__value" kindref="compound">bit_value&lt;T&gt;</ref>(p_register_reference)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_pointer(&amp;p_register_reference)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>~<ref refid="classhal_1_1bit__modify" kindref="compound">bit_modify</ref>()</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>*m_pointer<sp/>=<sp/>this-&gt;m_value;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>T*<sp/>m_pointer;</highlight></codeline>
<codeline lineno="391"><highlight class="normal">};</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hal</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="libraries/include/libhal-util/bit.hpp"/>
  </compounddef>
</doxygen>
