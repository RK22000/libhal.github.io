<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="libhal_2timeout_8hpp" kind="file" language="C++">
    <compoundname>timeout.hpp</compoundname>
    <includes refid="error_8hpp" local="yes">error.hpp</includes>
    <includes refid="functional_8hpp" local="yes">functional.hpp</includes>
    <includedby refid="libhal_2i2c_8hpp" local="yes">libraries/include/libhal/i2c.hpp</includedby>
    <includedby refid="at_8hpp" local="no">libraries/include/libhal-esp8266/at.hpp</includedby>
    <includedby refid="libhal-util_2serial_8hpp" local="no">libraries/include/libhal-util/serial.hpp</includedby>
    <includedby refid="serial__coroutines_8hpp" local="no">libraries/include/libhal-util/serial_coroutines.hpp</includedby>
    <includedby refid="libhal-util_2steady__clock_8hpp" local="no">libraries/include/libhal-util/steady_clock.hpp</includedby>
    <includedby refid="streams_8hpp" local="no">libraries/include/libhal-util/streams.hpp</includedby>
    <includedby refid="libhal-util_2timeout_8hpp" local="no">libraries/include/libhal-util/timeout.hpp</includedby>
    <includedby refid="libhal-util_2units_8hpp" local="no">libraries/include/libhal-util/units.hpp</includedby>
    <incdepgraph>
      <node id="4">
        <label>system_error</label>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="8">
        <label>tl/function_ref.hpp</label>
      </node>
      <node id="1">
        <label>libraries/include/libhal/timeout.hpp</label>
        <link refid="libhal_2timeout_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>third_party/inplace_function.hpp</label>
      </node>
      <node id="5">
        <label>functional.hpp</label>
        <link refid="functional_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>boost/leaf.hpp</label>
      </node>
      <node id="2">
        <label>error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>libraries/include/libhal-util/i2c.hpp</label>
        <link refid="libhal-util_2i2c_8hpp_source"/>
      </node>
      <node id="1">
        <label>libraries/include/libhal/timeout.hpp</label>
        <link refid="libhal_2timeout_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>libraries/include/libhal-esp8266/at.hpp</label>
        <link refid="at_8hpp_source"/>
      </node>
      <node id="7">
        <label>libraries/include/libhal-util/serial.hpp</label>
        <link refid="libhal-util_2serial_8hpp_source"/>
      </node>
      <node id="13">
        <label>libraries/include/libhal-armcortex/systick_timer.hpp</label>
        <link refid="systick__timer_8hpp_source"/>
      </node>
      <node id="3">
        <label>libraries/include/libhal-lpc40/i2c.hpp</label>
        <link refid="libhal-lpc40_2i2c_8hpp_source"/>
      </node>
      <node id="10">
        <label>libraries/include/libhal-util/streams.hpp</label>
        <link refid="streams_8hpp_source"/>
      </node>
      <node id="11">
        <label>libraries/include/libhal-util/timeout.hpp</label>
        <link refid="libhal-util_2timeout_8hpp_source"/>
      </node>
      <node id="12">
        <label>libraries/include/libhal-util/units.hpp</label>
        <link refid="libhal-util_2units_8hpp_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>libraries/include/libhal/i2c.hpp</label>
        <link refid="libhal_2i2c_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>libraries/include/libhal-util/serial_coroutines.hpp</label>
        <link refid="serial__coroutines_8hpp_source"/>
      </node>
      <node id="4">
        <label>libraries/include/libhal-soft/i2c_minimum_speed.hpp</label>
        <link refid="i2c__minimum__speed_8hpp_source"/>
      </node>
      <node id="9">
        <label>libraries/include/libhal-util/steady_clock.hpp</label>
        <link refid="libhal-util_2steady__clock_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacehal">hal</innernamespace>
    <briefdescription>
<para>Provides the hal::timeout type and utility functions that use that type. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2023<sp/>Google<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;error.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;functional.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehal" kindref="compound">hal</ref><sp/>{</highlight></codeline>
<codeline lineno="31" refid="namespacehal_1aadfba20b87ce09f21cc88f7c49e1bd60" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespacehal_1aadfba20b87ce09f21cc88f7c49e1bd60" kindref="member">work_state</ref></highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Callable<sp/>is<sp/>in<sp/>progress<sp/>and<sp/>has<sp/>not<sp/>yet<sp/>finished<sp/>performing<sp/>its<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>in_progress,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Callable<sp/>was<sp/>able<sp/>to<sp/>determine<sp/>that<sp/>it<sp/>failed<sp/>to<sp/>do<sp/>what<sp/>it<sp/>was<sp/>tasked<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>and<sp/>has<sp/>terminated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>failed,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Callable<sp/>finished<sp/>the<sp/>work<sp/>it<sp/>needed<sp/>to<sp/>perform<sp/>and<sp/>has<sp/>terminated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>finished,</highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="namespacehal_1a8ca200d14bc94cb64c41994e2abb2401" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacehal_1a8ca200d14bc94cb64c41994e2abb2401" kindref="member">timeout_function</ref><sp/>=<sp/>status(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">concept<sp/>timeout<sp/>=<sp/>std::convertible_to&lt;T,<sp/>hal::function_ref&lt;timeout_function&gt;&gt;;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="namespacehal_1a0c4728afc815e4ff09495eb35f708f6c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacehal_1a0c4728afc815e4ff09495eb35f708f6c" kindref="member">work_function</ref><sp/>=<sp/>result&lt;work_state&gt;();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">concept<sp/>worker<sp/>=<sp/>std::convertible_to&lt;T,<sp/>hal::function_ref&lt;work_function&gt;&gt;;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="namespacehal_1af5c62735e63bf161eac50062128e1550" refkind="member"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>status<sp/><ref refid="namespacehal_1af5c62735e63bf161eac50062128e1550" kindref="member">delay</ref>(timeout<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p_timeout)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>waiting<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>lambda<sp/>catches<sp/>a<sp/>`std::errc::timed_out`<sp/>handle<sp/>them<sp/>by<sp/>changing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>`waiting`<sp/>from<sp/>true<sp/>to<sp/>false<sp/>in<sp/>order<sp/>to<sp/>break<sp/>the<sp/>while<sp/>loop<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>timeout_catcher<sp/>=</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>[&amp;waiting](hal::match&lt;std::errc,<sp/>std::errc::timed_out&gt;<sp/>p_errc)<sp/>-&gt;<sp/>status<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)p_errc;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Simply<sp/>change<sp/>the<sp/>waiting<sp/>bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>waiting<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>successful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>HAL_CHECK(hal::attempt(</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>[&amp;p_timeout]()<sp/>-&gt;<sp/>status<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continuously<sp/>call<sp/>p_callback<sp/>until<sp/>it<sp/>either<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>`std::errc::timeout_out`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAL_CHECK(p_timeout());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unreachable!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>timeout_catcher));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="namespacehal_1a17e66fb842cd0ba8b46795b5e905741a" refkind="member"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacehal_1a17e66fb842cd0ba8b46795b5e905741a" kindref="member">never_timeout</ref>()</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[]()<sp/>-&gt;<sp/>status<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};<sp/>};</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hal</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="libraries/include/libhal/timeout.hpp"/>
  </compounddef>
</doxygen>
