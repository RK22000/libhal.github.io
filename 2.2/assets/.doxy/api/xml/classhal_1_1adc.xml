<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhal_1_1adc" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>hal::adc</compoundname>
    <derivedcompoundref refid="classhal_1_1lpc40_1_1adc" prot="public" virt="non-virtual">hal::lpc40::adc</derivedcompoundref>
    <derivedcompoundref refid="structhal_1_1mock_1_1adc" prot="public" virt="non-virtual">hal::mock::adc</derivedcompoundref>
    <derivedcompoundref refid="classhal_1_1soft_1_1adc__mux__pin" prot="public" virt="non-virtual">hal::soft::adc_mux_pin</derivedcompoundref>
    <derivedcompoundref refid="classhal_1_1soft_1_1inert__adc" prot="public" virt="non-virtual">hal::soft::inert_adc</derivedcompoundref>
    <includes refid="libhal_2adc_8hpp" local="no">adc.hpp</includes>
    <innerclass refid="structhal_1_1adc_1_1read__t" prot="public">hal::adc::read_t</innerclass>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhal_1_1adc_1aa47439748c64c60887bdbd75f9cc3c6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>result&lt; <ref refid="structhal_1_1adc_1_1read__t" kindref="compound">read_t</ref> &gt;</type>
        <definition>result&lt;read_t&gt; hal::adc::read</definition>
        <argsstring>()</argsstring>
        <name>read</name>
        <briefdescription>
<para>Sample the analog to digital converter and return the result. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>result&lt;read_t&gt; - the sampled adc value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/adc.hpp" line="55" column="11" bodyfile="libraries/include/libhal/adc.hpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1adc_1a10697dfc3b5b010e40cba12213f938f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual hal::adc::~adc</definition>
        <argsstring>()=default</argsstring>
        <name>~adc</name>
        <reimplementedby refid="classhal_1_1lpc40_1_1adc_1a86990c9d1bba2eb7d3b1806d5cccae05">~adc</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/adc.hpp" line="60" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhal_1_1adc_1aaf84b89a21851b22fd7001a230cbd87e" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>result&lt; <ref refid="structhal_1_1adc_1_1read__t" kindref="compound">read_t</ref> &gt;</type>
        <definition>virtual result&lt;read_t&gt; hal::adc::driver_read</definition>
        <argsstring>()=0</argsstring>
        <name>driver_read</name>
        <reimplementedby refid="classhal_1_1soft_1_1inert__adc_1ac5944b83612724288a0deca08c53518b">driver_read</reimplementedby>
        <reimplementedby refid="classhal_1_1lpc40_1_1adc_1a51eca053ab6c905df11b28171daf4137">driver_read</reimplementedby>
        <reimplementedby refid="structhal_1_1mock_1_1adc_1ab415b12f1cc65be190f57e31d7b46b64">driver_read</reimplementedby>
        <reimplementedby refid="classhal_1_1soft_1_1adc__mux__pin_1ad430c28480484bba04d529eecdbf7ca9">driver_read</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/adc.hpp" line="63" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Analog to Digital Converter (ADC) hardware abstraction interface. </para>
    </briefdescription>
    <detaileddescription>
<para>Use this interface for devices and peripherals that can convert analog voltage signals into a digital number.</para>
<para>ADC peripheral only know the proportion of a voltage signal relative to a Vss (negative reference) and a Vcc (positive reference) and thus cannot describe the voltage directly. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>hal::lpc40::adc</label>
        <link refid="classhal_1_1lpc40_1_1adc"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>hal::soft::inert_adc</label>
        <link refid="classhal_1_1soft_1_1inert__adc"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>hal::soft::adc_mux_pin</label>
        <link refid="classhal_1_1soft_1_1adc__mux__pin"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>hal::mock::adc</label>
        <link refid="structhal_1_1mock_1_1adc"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>hal::adc</label>
        <link refid="classhal_1_1adc"/>
      </node>
    </inheritancegraph>
    <location file="libraries/include/libhal/adc.hpp" line="30" column="1" bodyfile="libraries/include/libhal/adc.hpp" bodystart="31" bodyend="64"/>
    <listofallmembers>
      <member refid="classhal_1_1adc_1aaf84b89a21851b22fd7001a230cbd87e" prot="private" virt="pure-virtual"><scope>hal::adc</scope><name>driver_read</name></member>
      <member refid="classhal_1_1adc_1aa47439748c64c60887bdbd75f9cc3c6c" prot="public" virt="non-virtual"><scope>hal::adc</scope><name>read</name></member>
      <member refid="classhal_1_1adc_1a10697dfc3b5b010e40cba12213f938f8" prot="public" virt="virtual"><scope>hal::adc</scope><name>~adc</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
