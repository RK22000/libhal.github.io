<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhal_1_1rotation__sensor" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>hal::rotation_sensor</compoundname>
    <derivedcompoundref refid="classhal_1_1inert__rotation__sensor" prot="public" virt="non-virtual">hal::inert_rotation_sensor</derivedcompoundref>
    <derivedcompoundref refid="classhal_1_1rmd_1_1drc__rotation__sensor" prot="public" virt="non-virtual">hal::rmd::drc_rotation_sensor</derivedcompoundref>
    <derivedcompoundref refid="classhal_1_1rmd_1_1mc__x__rotation" prot="public" virt="non-virtual">hal::rmd::mc_x_rotation</derivedcompoundref>
    <includes refid="rotation__sensor_8hpp" local="no">rotation_sensor.hpp</includes>
    <innerclass refid="structhal_1_1rotation__sensor_1_1read__t" prot="public">hal::rotation_sensor::read_t</innerclass>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhal_1_1rotation__sensor_1a5ae02bc5fa8e61a8b2495f6bedd538dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>result&lt; <ref refid="structhal_1_1rotation__sensor_1_1read__t" kindref="compound">read_t</ref> &gt;</type>
        <definition>result&lt;read_t&gt; hal::rotation_sensor::read</definition>
        <argsstring>()</argsstring>
        <name>read</name>
        <briefdescription>
<para>Read the current angle measured by the device. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>result&lt;read_t&gt; - rotation data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/rotation_sensor.hpp" line="99" column="11" bodyfile="libraries/include/libhal/rotation_sensor.hpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1rotation__sensor_1a76d46d3bf36199a5b6e63d0e7d8d78f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual hal::rotation_sensor::~rotation_sensor</definition>
        <argsstring>()=default</argsstring>
        <name>~rotation_sensor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/rotation_sensor.hpp" line="104" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhal_1_1rotation__sensor_1ac9be6010cd69bbebaa5cc302671a4bfb" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>result&lt; <ref refid="structhal_1_1rotation__sensor_1_1read__t" kindref="compound">read_t</ref> &gt;</type>
        <definition>virtual result&lt;read_t&gt; hal::rotation_sensor::driver_read</definition>
        <argsstring>()=0</argsstring>
        <name>driver_read</name>
        <reimplementedby refid="classhal_1_1inert__rotation__sensor_1aa1b8a69cf2a14f869d67fb223b38bea3">driver_read</reimplementedby>
        <reimplementedby refid="classhal_1_1rmd_1_1drc__rotation__sensor_1adb6b2ac142d1df41f40541b9efac35ff">driver_read</reimplementedby>
        <reimplementedby refid="classhal_1_1rmd_1_1mc__x__rotation_1a3d56061e7335a17497a3cb78e09ed526">driver_read</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/rotation_sensor.hpp" line="107" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Rotation measuring hardware abstraction interface. </para>
    </briefdescription>
    <detaileddescription>
<para>Examples of rotary encoder are:</para>
<para><itemizedlist>
<listitem><para>Rotary Potentiometers</para>
</listitem><listitem><para>Quadrature Encoders</para>
</listitem><listitem><para>Incremental Encoders</para>
</listitem><listitem><para>Absolute Encoders</para>
</listitem><listitem><para>Rotary Magnetic Encoders</para>
</listitem><listitem><para>Inertial Measurement Unit or IMU</para>
</listitem></itemizedlist>
</para>
<para>Rotation sensors can be relative or absolute. Relative position means that the sensor can only see changes in rotation from where measurement started. In other words, at application start, relative encoders will start at 0. Absolute encoders know their position at all times. At application start, the absolute encoder will be able to determine its exact orientation relative to a frame of reference when read.</para>
<para>Examples of relative rotation sensors are:</para>
<para><itemizedlist>
<listitem><para>Quadrature Encoders</para>
</listitem><listitem><para>Incremental Encoders</para>
</listitem></itemizedlist>
</para>
<para>Examples of absolute rotation sensors are:</para>
<para><itemizedlist>
<listitem><para>Rotary Potentiometers</para>
</listitem><listitem><para>Absolute Encoders</para>
</listitem><listitem><para>Rotary Magnetic Encoders</para>
</listitem><listitem><para>IMUs</para>
</listitem></itemizedlist>
</para>
<para>Rotation sensors can also be finite or infinite. Finite meaning that the angle that can be reported is a fixed amount for the device. Infinite means that the encoder can continue rotating and adding more to its angle reading forever. Infinite rotation sensors tend to not have a physical stop that limits how much they can be rotated.</para>
<para>Examples of finite rotation sensors are:</para>
<para><itemizedlist>
<listitem><para>Rotary Potentiometers</para>
</listitem><listitem><para>Absolute Encoders</para>
</listitem><listitem><para>IMUs</para>
</listitem></itemizedlist>
</para>
<para>Examples of infinite rotation sensors are:</para>
<para><itemizedlist>
<listitem><para>Rotary Magnetic Encoders</para>
</listitem><listitem><para>Quadrature Encoders</para>
</listitem><listitem><para>Incremental Encoders</para>
</listitem></itemizedlist>
</para>
<para>This interface does not provide a means to determine these attributes of a rotation sensor as this is an application architecture decision. Drivers that implement this interface should document what kind of rotary sensor it is such that a developer can determine its applicability to their application. The context of which sensor ought to be used for an application is solely known at architecture definition time and software should not be expected to at runtime, if the right type of rotation sensor was passed into the object. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>hal::rotation_sensor</label>
        <link refid="classhal_1_1rotation__sensor"/>
      </node>
      <node id="3">
        <label>hal::rmd::drc_rotation_sensor</label>
        <link refid="classhal_1_1rmd_1_1drc__rotation__sensor"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>hal::inert_rotation_sensor</label>
        <link refid="classhal_1_1inert__rotation__sensor"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>hal::rmd::mc_x_rotation</label>
        <link refid="classhal_1_1rmd_1_1mc__x__rotation"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="libraries/include/libhal/rotation_sensor.hpp" line="78" column="1" bodyfile="libraries/include/libhal/rotation_sensor.hpp" bodystart="79" bodyend="108"/>
    <listofallmembers>
      <member refid="classhal_1_1rotation__sensor_1ac9be6010cd69bbebaa5cc302671a4bfb" prot="private" virt="pure-virtual"><scope>hal::rotation_sensor</scope><name>driver_read</name></member>
      <member refid="classhal_1_1rotation__sensor_1a5ae02bc5fa8e61a8b2495f6bedd538dd" prot="public" virt="non-virtual"><scope>hal::rotation_sensor</scope><name>read</name></member>
      <member refid="classhal_1_1rotation__sensor_1a76d46d3bf36199a5b6e63d0e7d8d78f4" prot="public" virt="virtual"><scope>hal::rotation_sensor</scope><name>~rotation_sensor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
