<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhal_1_1dac" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>hal::dac</compoundname>
    <derivedcompoundref refid="structhal_1_1mock_1_1dac" prot="public" virt="non-virtual">hal::mock::dac</derivedcompoundref>
    <derivedcompoundref refid="classhal_1_1soft_1_1inert__dac" prot="public" virt="non-virtual">hal::soft::inert_dac</derivedcompoundref>
    <includes refid="libhal_2dac_8hpp" local="no">dac.hpp</includes>
    <innerclass refid="structhal_1_1dac_1_1write__t" prot="public">hal::dac::write_t</innerclass>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhal_1_1dac_1a5ec1f3dc043bb5796ea9f3c2845731c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>result&lt; <ref refid="structhal_1_1dac_1_1write__t" kindref="compound">write_t</ref> &gt;</type>
        <definition>result&lt;write_t&gt; hal::dac::write</definition>
        <argsstring>(float p_percentage)</argsstring>
        <name>write</name>
        <param>
          <type>float</type>
          <declname>p_percentage</declname>
        </param>
        <briefdescription>
<para>Set the output voltage of the DAC. </para>
        </briefdescription>
        <detaileddescription>
<para>The input value <computeroutput>p_percentage</computeroutput> is a 32-bit floating point value from 0.0f to +1.0f.</para>
<para>The floating point value is linearly proportional to the output voltage relative to the Vss and Vcc such that if Vss is 0V (gnd) and Vcc is 5V then 0.0 is 0V, 0.25 is 1.25V, 0.445 is 2.225V and 1.0 is 5V.</para>
<para>This function clamps the input value between 0.0f and 1.0f and thus values passed to driver implementations are guaranteed to be within this range. Callers of this function do not need to clamp their values before passing them into this function as it would be redundant. The rationale for doing this at the interface layer is that it allows callers and driver implementors to omit redundant clamping code, reducing code bloat.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_percentage</parametername>
</parameternamelist>
<parameterdescription>
<para>- value from 0.0f to +1.0f representing the proportion of the output voltage from the Vss to Vcc. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>result&lt;write_t&gt; - success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/dac.hpp" line="63" column="11" bodyfile="libraries/include/libhal/dac.hpp" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1dac_1a3d21b3da732995516ee25806396abae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual hal::dac::~dac</definition>
        <argsstring>()=default</argsstring>
        <name>~dac</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/dac.hpp" line="69" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhal_1_1dac_1aa0826bf9b3828c076c57d3b4403a6f36" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>result&lt; <ref refid="structhal_1_1dac_1_1write__t" kindref="compound">write_t</ref> &gt;</type>
        <definition>virtual result&lt;write_t&gt; hal::dac::driver_write</definition>
        <argsstring>(float p_percentage)=0</argsstring>
        <name>driver_write</name>
        <reimplementedby refid="structhal_1_1mock_1_1dac_1ab55148b1e9249394aa1c3ff3e9d6b83c">driver_write</reimplementedby>
        <param>
          <type>float</type>
          <declname>p_percentage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/dac.hpp" line="72" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Digital to Analog Converter (DAC) hardware abstraction interface. </para>
    </briefdescription>
    <detaileddescription>
<para>Use this interface for devices and peripherals that can create arbitrary analog voltages between a defined Vss (negative reference) and Vcc (positive reference) voltage. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>hal::mock::dac</label>
        <link refid="structhal_1_1mock_1_1dac"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>hal::dac</label>
        <link refid="classhal_1_1dac"/>
      </node>
      <node id="3">
        <label>hal::soft::inert_dac</label>
        <link refid="classhal_1_1soft_1_1inert__dac"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="libraries/include/libhal/dac.hpp" line="30" column="1" bodyfile="libraries/include/libhal/dac.hpp" bodystart="31" bodyend="73"/>
    <listofallmembers>
      <member refid="classhal_1_1dac_1aa0826bf9b3828c076c57d3b4403a6f36" prot="private" virt="pure-virtual"><scope>hal::dac</scope><name>driver_write</name></member>
      <member refid="classhal_1_1dac_1a5ec1f3dc043bb5796ea9f3c2845731c3" prot="public" virt="non-virtual"><scope>hal::dac</scope><name>write</name></member>
      <member refid="classhal_1_1dac_1a3d21b3da732995516ee25806396abae3" prot="public" virt="virtual"><scope>hal::dac</scope><name>~dac</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
