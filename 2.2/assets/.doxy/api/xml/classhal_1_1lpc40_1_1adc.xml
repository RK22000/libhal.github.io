<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhal_1_1lpc40_1_1adc" kind="class" language="C++" prot="public">
    <compoundname>hal::lpc40::adc</compoundname>
    <basecompoundref refid="classhal_1_1adc" prot="public" virt="non-virtual">hal::adc</basecompoundref>
    <includes refid="libhal-lpc40_2adc_8hpp" local="no">adc.hpp</includes>
    <innerclass refid="structhal_1_1lpc40_1_1adc_1_1channel" prot="public">hal::lpc40::adc::channel</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhal_1_1lpc40_1_1adc_1a92f1a8b848506b39066aca5dbc9e6486" prot="private" static="no" mutable="no">
        <type>uint32_t *</type>
        <definition>volatile uint32_t* hal::lpc40::adc::m_sample</definition>
        <argsstring></argsstring>
        <name>m_sample</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-lpc40/adc.hpp" line="90" column="21" bodyfile="libraries/include/libhal-lpc40/adc.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classhal_1_1lpc40_1_1adc_1af99f5a3b0b9820c6dd804b1a9779fa3a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>result&lt; <ref refid="classhal_1_1lpc40_1_1adc" kindref="compound">adc</ref> &gt;</type>
        <definition>static result&lt;adc&gt; hal::lpc40::adc::get</definition>
        <argsstring>(size_t p_channel)</argsstring>
        <name>get</name>
        <param>
          <type>size_t</type>
          <declname>p_channel</declname>
        </param>
        <briefdescription>
<para>Get a predefined adc channel. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>ADC channel 0 is pin(0, 23)</para>
</listitem><listitem><para>ADC channel 1 is pin(0, 24)</para>
</listitem><listitem><para>ADC channel 2 is pin(0, 25)</para>
</listitem><listitem><para>ADC channel 3 is pin(0, 26)</para>
</listitem><listitem><para>ADC channel 4 is pin(1, 30)</para>
</listitem><listitem><para>ADC channel 5 is pin(1, 31)</para>
</listitem><listitem><para>ADC channel 6 is pin(0, 12)</para>
</listitem><listitem><para>ADC channel 7 is pin(0, 13)</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>- Which adc channel to return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>result&lt;adc&gt; - adc driver object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-lpc40/adc.hpp" line="62" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1lpc40_1_1adc_1a685f527b4eade961bb777c9d63eaa5ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>result&lt; <ref refid="classhal_1_1lpc40_1_1adc" kindref="compound">adc</ref> &gt;</type>
        <definition>static result&lt;adc&gt; hal::lpc40::adc::construct_custom_channel</definition>
        <argsstring>(const channel &amp;p_channel)</argsstring>
        <name>construct_custom_channel</name>
        <param>
          <type>const <ref refid="structhal_1_1lpc40_1_1adc_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>p_channel</declname>
        </param>
        <briefdescription>
<para>Construct a custom adc object based on the passed in channel information. </para>
        </briefdescription>
        <detaileddescription>
<para>Care should be taken to ensure that the adc&apos;s operating frequency does not go above 1MHz and that the the channel index is within the bounds of 0 to 7. Exceeding these bounds will result in a call to std::abort.</para>
<para>Care should also be taken to ensure that two adc&apos;s constructed via this method do not overlap in index.</para>
<para>The operating frequency is shared across all adc channels, which means that the last adc to be constructed will set sampling frequency for all channels.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>- Which adc channel to return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>result&lt;adc&gt; - adc driver object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-lpc40/adc.hpp" line="82" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhal_1_1lpc40_1_1adc_1a86990c9d1bba2eb7d3b1806d5cccae05" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual hal::lpc40::adc::~adc</definition>
        <argsstring>()=default</argsstring>
        <name>~adc</name>
        <reimplements refid="classhal_1_1adc_1a10697dfc3b5b010e40cba12213f938f8">~adc</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-lpc40/adc.hpp" line="84" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhal_1_1lpc40_1_1adc_1af23d900f457cfc68be8a1d31c69c3814" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hal::lpc40::adc::adc</definition>
        <argsstring>(const channel &amp;p_channel)</argsstring>
        <name>adc</name>
        <param>
          <type>const <ref refid="structhal_1_1lpc40_1_1adc_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>p_channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-lpc40/adc.hpp" line="87" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1lpc40_1_1adc_1a51eca053ab6c905df11b28171daf4137" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>result&lt; <ref refid="structhal_1_1adc_1_1read__t" kindref="compound">read_t</ref> &gt;</type>
        <definition>result&lt;read_t&gt; hal::lpc40::adc::driver_read</definition>
        <argsstring>() override</argsstring>
        <name>driver_read</name>
        <reimplements refid="classhal_1_1adc_1aaf84b89a21851b22fd7001a230cbd87e">driver_read</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-lpc40/adc.hpp" line="88" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Analog to digital converter. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>hal::lpc40::adc</label>
        <link refid="classhal_1_1lpc40_1_1adc"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>hal::adc</label>
        <link refid="classhal_1_1adc"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>hal::lpc40::adc</label>
        <link refid="classhal_1_1lpc40_1_1adc"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>hal::adc</label>
        <link refid="classhal_1_1adc"/>
      </node>
    </collaborationgraph>
    <location file="libraries/include/libhal-lpc40/adc.hpp" line="30" column="1" bodyfile="libraries/include/libhal-lpc40/adc.hpp" bodystart="31" bodyend="91"/>
    <listofallmembers>
      <member refid="classhal_1_1lpc40_1_1adc_1af23d900f457cfc68be8a1d31c69c3814" prot="private" virt="non-virtual"><scope>hal::lpc40::adc</scope><name>adc</name></member>
      <member refid="classhal_1_1lpc40_1_1adc_1a685f527b4eade961bb777c9d63eaa5ae" prot="public" virt="non-virtual"><scope>hal::lpc40::adc</scope><name>construct_custom_channel</name></member>
      <member refid="classhal_1_1lpc40_1_1adc_1a51eca053ab6c905df11b28171daf4137" prot="private" virt="virtual"><scope>hal::lpc40::adc</scope><name>driver_read</name></member>
      <member refid="classhal_1_1lpc40_1_1adc_1af99f5a3b0b9820c6dd804b1a9779fa3a" prot="public" virt="non-virtual"><scope>hal::lpc40::adc</scope><name>get</name></member>
      <member refid="classhal_1_1lpc40_1_1adc_1a92f1a8b848506b39066aca5dbc9e6486" prot="private" virt="non-virtual"><scope>hal::lpc40::adc</scope><name>m_sample</name></member>
      <member refid="classhal_1_1adc_1aa47439748c64c60887bdbd75f9cc3c6c" prot="public" virt="non-virtual"><scope>hal::lpc40::adc</scope><name>read</name></member>
      <member refid="classhal_1_1lpc40_1_1adc_1a86990c9d1bba2eb7d3b1806d5cccae05" prot="public" virt="virtual"><scope>hal::lpc40::adc</scope><name>~adc</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
