<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhal_1_1timer" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>hal::timer</compoundname>
    <derivedcompoundref refid="classhal_1_1cortex__m_1_1systick__timer" prot="public" virt="non-virtual">hal::cortex_m::systick_timer</derivedcompoundref>
    <derivedcompoundref refid="structhal_1_1mock_1_1timer" prot="public" virt="non-virtual">hal::mock::timer</derivedcompoundref>
    <derivedcompoundref refid="classhal_1_1soft_1_1inert__timer" prot="public" virt="non-virtual">hal::soft::inert_timer</derivedcompoundref>
    <includes refid="libhal_2timer_8hpp" local="no">timer.hpp</includes>
    <innerclass refid="structhal_1_1timer_1_1cancel__t" prot="public">hal::timer::cancel_t</innerclass>
    <innerclass refid="structhal_1_1timer_1_1is__running__t" prot="public">hal::timer::is_running_t</innerclass>
    <innerclass refid="structhal_1_1timer_1_1out__of__bounds__error" prot="public">hal::timer::out_of_bounds_error</innerclass>
    <innerclass refid="structhal_1_1timer_1_1schedule__t" prot="public">hal::timer::schedule_t</innerclass>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhal_1_1timer_1aa31f569c3165567f24920a06736d57ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>result&lt; <ref refid="structhal_1_1timer_1_1is__running__t" kindref="compound">is_running_t</ref> &gt;</type>
        <definition>result&lt;is_running_t&gt; hal::timer::is_running</definition>
        <argsstring>()</argsstring>
        <name>is_running</name>
        <briefdescription>
<para>Determine if the timer is currently running. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>result&lt;is_running_t&gt; - information about the timer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/timer.hpp" line="95" column="11" bodyfile="libraries/include/libhal/timer.hpp" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1timer_1a51c60a0ecd9c3e4b0871af671bdeac3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>result&lt; <ref refid="structhal_1_1timer_1_1cancel__t" kindref="compound">cancel_t</ref> &gt;</type>
        <definition>result&lt;cancel_t&gt; hal::timer::cancel</definition>
        <argsstring>()</argsstring>
        <name>cancel</name>
        <briefdescription>
<para>Stops a scheduled event from happening. </para>
        </briefdescription>
        <detaileddescription>
<para>Does nothing if the timer is not currently running.</para>
<para>Note that there must be sufficient time between the this call finishing and the scheduled event&apos;s termination. If this call is too close to when the schedule event expires, this function may not complete before the hardware calls the callback.</para>
<para><simplesect kind="return"><para>result&lt;cancel_t&gt; - success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/timer.hpp" line="112" column="11" bodyfile="libraries/include/libhal/timer.hpp" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1timer_1a992234ed828ee9fac8b06ae4d0b8f83c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>result&lt; <ref refid="structhal_1_1timer_1_1schedule__t" kindref="compound">schedule_t</ref> &gt;</type>
        <definition>result&lt;schedule_t&gt; hal::timer::schedule</definition>
        <argsstring>(hal::callback&lt; void(void)&gt; p_callback, hal::time_duration p_delay)</argsstring>
        <name>schedule</name>
        <param>
          <type><ref refid="namespacehal_1a6051b44bfb2759cbcdba16019f3f1550" kindref="member">hal::callback</ref>&lt; void(void)&gt;</type>
          <declname>p_callback</declname>
        </param>
        <param>
          <type><ref refid="namespacehal_1a858b08a6e4e3eb5752d8e0daaad5ed00" kindref="member">hal::time_duration</ref></type>
          <declname>p_delay</declname>
        </param>
        <briefdescription>
<para>Schedule an callback be be executed after the delay time. </para>
        </briefdescription>
        <detaileddescription>
<para>If this is called and the timer has already scheduled an event (in other words, <computeroutput><ref refid="classhal_1_1timer_1aa31f569c3165567f24920a06736d57ba" kindref="member">is_running()</ref></computeroutput> returns true), then the previous scheduled event will be canceled and the new scheduled event will be started.</para>
<para>If the delay time result in a tick period of 0, then the timer will execute after 1 tick period. For example, if the tick period is 1ms and the requested time delay is 500us, then the event will be scheduled for 1ms.</para>
<para>If the tick period is 1ms and the requested time is 2.5ms then the event will be scheduled after 2 tick periods or in 2ms.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>- callback function to be called when the timer expires </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_delay</parametername>
</parameternamelist>
<parameterdescription>
<para>- the amount of time until the timer expires </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>result&lt;schedule_t&gt; - success or failure </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="structhal_1_1timer_1_1out__of__bounds__error" kindref="compound">out_of_bounds_error</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>- if p_interval is greater than what can be cannot be achieved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/timer.hpp" line="137" column="11" bodyfile="libraries/include/libhal/timer.hpp" bodystart="137" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1timer_1aebf27697c5512202ac99f8b0f159e441" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual hal::timer::~timer</definition>
        <argsstring>()=default</argsstring>
        <name>~timer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/timer.hpp" line="144" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhal_1_1timer_1ac28b122b4b6f929a98fbaea8c23f786a" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>result&lt; <ref refid="structhal_1_1timer_1_1is__running__t" kindref="compound">is_running_t</ref> &gt;</type>
        <definition>virtual result&lt;is_running_t&gt; hal::timer::driver_is_running</definition>
        <argsstring>()=0</argsstring>
        <name>driver_is_running</name>
        <reimplementedby refid="classhal_1_1soft_1_1inert__timer_1a3b2da90b927f633c76b7a4004b11312c">driver_is_running</reimplementedby>
        <reimplementedby refid="classhal_1_1cortex__m_1_1systick__timer_1aab132ce2f8a74beaaf65767eb0842c43">driver_is_running</reimplementedby>
        <reimplementedby refid="structhal_1_1mock_1_1timer_1ac010601ff5449c11b03d68d669bfe3ed">driver_is_running</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/timer.hpp" line="147" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1timer_1a273b708a1f149479290444f10d82b4fa" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>result&lt; <ref refid="structhal_1_1timer_1_1cancel__t" kindref="compound">cancel_t</ref> &gt;</type>
        <definition>virtual result&lt;cancel_t&gt; hal::timer::driver_cancel</definition>
        <argsstring>()=0</argsstring>
        <name>driver_cancel</name>
        <reimplementedby refid="classhal_1_1soft_1_1inert__timer_1aeb5320c8048bad5ee9800ef28a9ffbef">driver_cancel</reimplementedby>
        <reimplementedby refid="classhal_1_1cortex__m_1_1systick__timer_1abf96f27d6a88bf6d7b4b228659ac23d4">driver_cancel</reimplementedby>
        <reimplementedby refid="structhal_1_1mock_1_1timer_1ae8144b24739ac9584433432a25326364">driver_cancel</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/timer.hpp" line="148" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1timer_1a9696735ea2247cd7924cbc4774fcddd7" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>result&lt; <ref refid="structhal_1_1timer_1_1schedule__t" kindref="compound">schedule_t</ref> &gt;</type>
        <definition>virtual result&lt;schedule_t&gt; hal::timer::driver_schedule</definition>
        <argsstring>(hal::callback&lt; void(void)&gt; p_callback, hal::time_duration p_delay)=0</argsstring>
        <name>driver_schedule</name>
        <reimplementedby refid="classhal_1_1cortex__m_1_1systick__timer_1affc477fd954a0558b0d98f3cab44c9e3">driver_schedule</reimplementedby>
        <reimplementedby refid="structhal_1_1mock_1_1timer_1ab1933a77ff0df4a98dd9ad9c76711cf3">driver_schedule</reimplementedby>
        <param>
          <type><ref refid="namespacehal_1a6051b44bfb2759cbcdba16019f3f1550" kindref="member">hal::callback</ref>&lt; void(void)&gt;</type>
          <declname>p_callback</declname>
        </param>
        <param>
          <type><ref refid="namespacehal_1a858b08a6e4e3eb5752d8e0daaad5ed00" kindref="member">hal::time_duration</ref></type>
          <declname>p_delay</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal/timer.hpp" line="149" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Timer hardware abstraction interface. </para>
    </briefdescription>
    <detaileddescription>
<para>Use this interface for devices and peripherals that have timer like capabilities, such that, when a timer&apos;s time has expired, an event, interrupt, or signal is generated.</para>
<para>Timer drivers tick period must be an integer multiple of 1 nanosecond, meaning that the only tick period allowed are 1ns, 2ns, up to the maximum holdable in a std::chrono::nanosecond type. sub-nanosecond tick periods are not allowed. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>hal::soft::inert_timer</label>
        <link refid="classhal_1_1soft_1_1inert__timer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>hal::mock::timer</label>
        <link refid="structhal_1_1mock_1_1timer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>hal::cortex_m::systick_timer</label>
        <link refid="classhal_1_1cortex__m_1_1systick__timer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>hal::timer</label>
        <link refid="classhal_1_1timer"/>
      </node>
    </inheritancegraph>
    <location file="libraries/include/libhal/timer.hpp" line="37" column="1" bodyfile="libraries/include/libhal/timer.hpp" bodystart="38" bodyend="152"/>
    <listofallmembers>
      <member refid="classhal_1_1timer_1a51c60a0ecd9c3e4b0871af671bdeac3e" prot="public" virt="non-virtual"><scope>hal::timer</scope><name>cancel</name></member>
      <member refid="classhal_1_1timer_1a273b708a1f149479290444f10d82b4fa" prot="private" virt="pure-virtual"><scope>hal::timer</scope><name>driver_cancel</name></member>
      <member refid="classhal_1_1timer_1ac28b122b4b6f929a98fbaea8c23f786a" prot="private" virt="pure-virtual"><scope>hal::timer</scope><name>driver_is_running</name></member>
      <member refid="classhal_1_1timer_1a9696735ea2247cd7924cbc4774fcddd7" prot="private" virt="pure-virtual"><scope>hal::timer</scope><name>driver_schedule</name></member>
      <member refid="classhal_1_1timer_1aa31f569c3165567f24920a06736d57ba" prot="public" virt="non-virtual"><scope>hal::timer</scope><name>is_running</name></member>
      <member refid="classhal_1_1timer_1a992234ed828ee9fac8b06ae4d0b8f83c" prot="public" virt="non-virtual"><scope>hal::timer</scope><name>schedule</name></member>
      <member refid="classhal_1_1timer_1aebf27697c5512202ac99f8b0f159e441" prot="public" virt="virtual"><scope>hal::timer</scope><name>~timer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
