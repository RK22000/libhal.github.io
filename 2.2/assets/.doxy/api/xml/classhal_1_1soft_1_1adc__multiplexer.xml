<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classhal_1_1soft_1_1adc__multiplexer" kind="class" language="C++" prot="public">
    <compoundname>hal::soft::adc_multiplexer</compoundname>
    <includes refid="adc__mux_8hpp" local="no">adc_mux.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhal_1_1soft_1_1adc__multiplexer_1a7511ca37bac856e7b8a342401f7db5db" prot="private" static="no" mutable="no">
        <type>std::span&lt; <ref refid="classhal_1_1output__pin" kindref="compound">output_pin</ref> * &gt;</type>
        <definition>std::span&lt;output_pin*&gt; hal::soft::adc_multiplexer::m_signal_pins</definition>
        <argsstring></argsstring>
        <name>m_signal_pins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-soft/adc_mux.hpp" line="73" column="13" bodyfile="libraries/include/libhal-soft/adc_mux.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhal_1_1soft_1_1adc__multiplexer_1ae36caa2d4462d2432e3af07d9bc5aafd" prot="private" static="no" mutable="no">
        <type><ref refid="classhal_1_1adc" kindref="compound">hal::adc</ref> *</type>
        <definition>hal::adc* hal::soft::adc_multiplexer::m_source_pin</definition>
        <argsstring></argsstring>
        <name>m_source_pin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-soft/adc_mux.hpp" line="74" column="12" bodyfile="libraries/include/libhal-soft/adc_mux.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhal_1_1soft_1_1adc__multiplexer_1ad6c08d9db646bfe73dc5724045606161" prot="private" static="no" mutable="no">
        <type><ref refid="classhal_1_1steady__clock" kindref="compound">hal::steady_clock</ref> *</type>
        <definition>hal::steady_clock* hal::soft::adc_multiplexer::m_clock</definition>
        <argsstring></argsstring>
        <name>m_clock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-soft/adc_mux.hpp" line="75" column="21" bodyfile="libraries/include/libhal-soft/adc_mux.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classhal_1_1soft_1_1adc__multiplexer_1a794dae40eb067ba040ad2824b1cf27bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhal_1_1soft_1_1adc__multiplexer" kindref="compound">adc_multiplexer</ref></type>
        <definition>static adc_multiplexer hal::soft::adc_multiplexer::create</definition>
        <argsstring>(std::span&lt; hal::output_pin * &gt; p_signal_pins, hal::adc &amp;p_source_pin, hal::steady_clock &amp;p_clock)</argsstring>
        <name>create</name>
        <param>
          <type>std::span&lt; <ref refid="classhal_1_1output__pin" kindref="compound">hal::output_pin</ref> * &gt;</type>
          <declname>p_signal_pins</declname>
        </param>
        <param>
          <type><ref refid="classhal_1_1adc" kindref="compound">hal::adc</ref> &amp;</type>
          <declname>p_source_pin</declname>
        </param>
        <param>
          <type><ref refid="classhal_1_1steady__clock" kindref="compound">hal::steady_clock</ref> &amp;</type>
          <declname>p_clock</declname>
        </param>
        <briefdescription>
<para>Constructs a new <ref refid="classhal_1_1soft_1_1adc__multiplexer" kindref="compound">adc_multiplexer</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_signal_pins</parametername>
</parameternamelist>
<parameterdescription>
<para>A span of the output signal pins used to determine the channel on the mux. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_source_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>The output adc pin of the multiplexer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_clock</parametername>
</parameternamelist>
<parameterdescription>
<para>A steady clock used for delaying 500ns to give time to the mux to have an updated signal. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The constructed <ref refid="classhal_1_1soft_1_1adc__multiplexer" kindref="compound">adc_multiplexer</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-soft/adc_mux.hpp" line="44" column="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhal_1_1soft_1_1adc__multiplexer_1ab0f6a1f66333af8a245af165c5d700ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hal::result&lt; <ref refid="structhal_1_1adc_1_1read__t" kindref="compound">hal::adc::read_t</ref> &gt;</type>
        <definition>hal::result&lt;hal::adc::read_t&gt; hal::soft::adc_multiplexer::read_channel</definition>
        <argsstring>(std::uint16_t p_mux_port)</argsstring>
        <name>read_channel</name>
        <param>
          <type>std::uint16_t</type>
          <declname>p_mux_port</declname>
        </param>
        <briefdescription>
<para>Reads a channel on the mux. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_mux_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port to be read. If an out of bounds port number is passed, an error-typed result is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="structhal_1_1adc_1_1read__t" kindref="compound">hal::adc::read_t</ref> struct of the read value or an error if an invalid port is given. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-soft/adc_mux.hpp" line="56" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classhal_1_1soft_1_1adc__multiplexer_1ad8f16a8e4ac2aa0accec3be4a4784317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hal::soft::adc_multiplexer::get_max_channel</definition>
        <argsstring>()</argsstring>
        <name>get_max_channel</name>
        <briefdescription>
<para>Gets the highest capacity channel held by the ADC mux object. This is calculated based off of how many source pins are available. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The maximum channel number for this mux (2^n states, where n is number of source pins). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-soft/adc_mux.hpp" line="65" column="7"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhal_1_1soft_1_1adc__multiplexer_1ac3ff7c45c7357120be55c0ab0fbe463b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hal::soft::adc_multiplexer::adc_multiplexer</definition>
        <argsstring>(std::span&lt; output_pin * &gt; p_signal_pins, hal::adc &amp;p_source_pin, hal::steady_clock &amp;p_clock)</argsstring>
        <name>adc_multiplexer</name>
        <param>
          <type>std::span&lt; <ref refid="classhal_1_1output__pin" kindref="compound">output_pin</ref> * &gt;</type>
          <declname>p_signal_pins</declname>
        </param>
        <param>
          <type><ref refid="classhal_1_1adc" kindref="compound">hal::adc</ref> &amp;</type>
          <declname>p_source_pin</declname>
        </param>
        <param>
          <type><ref refid="classhal_1_1steady__clock" kindref="compound">hal::steady_clock</ref> &amp;</type>
          <declname>p_clock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-soft/adc_mux.hpp" line="68" column="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A driver for an ADC multiplexer that manages and reads ADC mux pins. This driver is intended to be used with multiplexers that use digital signals. An ADC multiplexer can be used to expand the number of input channels of an ADC. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/include/libhal-soft/adc_mux.hpp" line="31" column="1" bodyfile="libraries/include/libhal-soft/adc_mux.hpp" bodystart="32" bodyend="76"/>
    <listofallmembers>
      <member refid="classhal_1_1soft_1_1adc__multiplexer_1ac3ff7c45c7357120be55c0ab0fbe463b" prot="private" virt="non-virtual"><scope>hal::soft::adc_multiplexer</scope><name>adc_multiplexer</name></member>
      <member refid="classhal_1_1soft_1_1adc__multiplexer_1a794dae40eb067ba040ad2824b1cf27bb" prot="public" virt="non-virtual"><scope>hal::soft::adc_multiplexer</scope><name>create</name></member>
      <member refid="classhal_1_1soft_1_1adc__multiplexer_1ad8f16a8e4ac2aa0accec3be4a4784317" prot="public" virt="non-virtual"><scope>hal::soft::adc_multiplexer</scope><name>get_max_channel</name></member>
      <member refid="classhal_1_1soft_1_1adc__multiplexer_1ad6c08d9db646bfe73dc5724045606161" prot="private" virt="non-virtual"><scope>hal::soft::adc_multiplexer</scope><name>m_clock</name></member>
      <member refid="classhal_1_1soft_1_1adc__multiplexer_1a7511ca37bac856e7b8a342401f7db5db" prot="private" virt="non-virtual"><scope>hal::soft::adc_multiplexer</scope><name>m_signal_pins</name></member>
      <member refid="classhal_1_1soft_1_1adc__multiplexer_1ae36caa2d4462d2432e3af07d9bc5aafd" prot="private" virt="non-virtual"><scope>hal::soft::adc_multiplexer</scope><name>m_source_pin</name></member>
      <member refid="classhal_1_1soft_1_1adc__multiplexer_1ab0f6a1f66333af8a245af165c5d700ae" prot="public" virt="non-virtual"><scope>hal::soft::adc_multiplexer</scope><name>read_channel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
