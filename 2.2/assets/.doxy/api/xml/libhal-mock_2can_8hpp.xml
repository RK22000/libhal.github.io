<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="libhal-mock_2can_8hpp" kind="file" language="C++">
    <compoundname>can.hpp</compoundname>
    <includes refid="testing_8hpp" local="yes">testing.hpp</includes>
    <includes refid="libhal_2can_8hpp" local="no">libhal/can.hpp</includes>
    <includes refid="functional_8hpp" local="no">libhal/functional.hpp</includes>
    <incdepgraph>
      <node id="12">
        <label>system_error</label>
      </node>
      <node id="14">
        <label>cstdint</label>
      </node>
      <node id="17">
        <label>tl/function_ref.hpp</label>
      </node>
      <node id="1">
        <label>libraries/include/libhal-mock/can.hpp</label>
        <link refid="libhal-mock_2can_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>third_party/inplace_function.hpp</label>
      </node>
      <node id="15">
        <label>functional.hpp</label>
        <link refid="functional_8hpp_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ios</label>
      </node>
      <node id="18">
        <label>units.hpp</label>
        <link refid="libhal_2units_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>tuple</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="11">
        <label>boost/leaf.hpp</label>
      </node>
      <node id="4">
        <label>array</label>
      </node>
      <node id="10">
        <label>libhal/error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>testing.hpp</label>
        <link refid="testing_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>chrono</label>
      </node>
      <node id="7">
        <label>span</label>
      </node>
      <node id="3">
        <label>algorithm</label>
      </node>
      <node id="13">
        <label>libhal/can.hpp</label>
        <link refid="libhal_2can_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structhal_1_1mock_1_1can" prot="public">hal::mock::can</innerclass>
    <innernamespace refid="namespacehal">hal</innernamespace>
    <innernamespace refid="namespacehal_1_1mock">hal::mock</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="libhal-mock_2can_8hpp_1a08776759758e27c6ecfd26d9dcb4392b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CharT</type>
          </param>
          <param>
            <type>class Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; CharT, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;CharT, Traits&gt;&amp; operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; CharT, Traits &gt; &amp;p_ostream, const hal::can::message_t &amp;p_message)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; CharT, Traits &gt; &amp;</type>
          <declname>p_ostream</declname>
        </param>
        <param>
          <type>const <ref refid="structhal_1_1can_1_1message__t" kindref="compound">hal::can::message_t</ref> &amp;</type>
          <declname>p_message</declname>
        </param>
        <briefdescription>
<para>print can::message_t type using ostreams </para>
        </briefdescription>
        <detaileddescription>
<para>Meant for unit testing, testing and simulation purposes C++ streams, in general, should not be used for any embedded project that will ever have to be used on an MCU due to its memory cost.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CharT</parametername>
</parameternamelist>
<parameterdescription>
<para>- character type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Traits</parametername>
</parameternamelist>
<parameterdescription>
<para>- ostream traits type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_ostream</parametername>
</parameternamelist>
<parameterdescription>
<para>- the ostream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_message</parametername>
</parameternamelist>
<parameterdescription>
<para>- object to convert to a string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::basic_ostream&lt;CharT, Traits&gt;&amp; - reference to the ostream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/include/libhal-mock/can.hpp" line="1" column="0" bodyfile="libraries/include/libhal-mock/can.hpp" bodystart="87" bodyend="100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2023<sp/>Google<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;testing.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libhal/can.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libhal/functional.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hal::mock<sp/>{</highlight></codeline>
<codeline lineno="26" refid="structhal_1_1mock_1_1can" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhal_1_1mock_1_1can" kindref="compound">can</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classhal_1_1can" kindref="compound">hal::can</ref></highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32" refid="structhal_1_1mock_1_1can_1a234578234b8deacd0e3f3d1b563bbedf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1mock_1_1can_1a234578234b8deacd0e3f3d1b563bbedf" kindref="member">reset</ref>()</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhal_1_1mock_1_1can_1abef117a5a5ff0bfc7ee313814b015eb1" kindref="member">spy_configure</ref>.<ref refid="classhal_1_1spy__handler_1ab4de6f2ee75eae23253e4fb78bb82bf1" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhal_1_1mock_1_1can_1a4c2d5472b8ed609ee459e062c43945e1" kindref="member">spy_send</ref>.<ref refid="classhal_1_1spy__handler_1ab4de6f2ee75eae23253e4fb78bb82bf1" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhal_1_1mock_1_1can_1a12e65e48951bd4a2b7f8b5020d1fe6fe" kindref="member">spy_on_receive</ref>.<ref refid="classhal_1_1spy__handler_1ab4de6f2ee75eae23253e4fb78bb82bf1" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structhal_1_1mock_1_1can_1a63ada3cc887527bae190fd3210f5b7be" kindref="member">spy_bus_on</ref>.<ref refid="classhal_1_1spy__handler_1ab4de6f2ee75eae23253e4fb78bb82bf1" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="structhal_1_1mock_1_1can_1abef117a5a5ff0bfc7ee313814b015eb1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1spy__handler" kindref="compound">spy_handler&lt;settings&gt;</ref><sp/><ref refid="structhal_1_1mock_1_1can_1abef117a5a5ff0bfc7ee313814b015eb1" kindref="member">spy_configure</ref>;</highlight></codeline>
<codeline lineno="43" refid="structhal_1_1mock_1_1can_1a4c2d5472b8ed609ee459e062c43945e1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1spy__handler" kindref="compound">spy_handler&lt;message_t&gt;</ref><sp/><ref refid="structhal_1_1mock_1_1can_1a4c2d5472b8ed609ee459e062c43945e1" kindref="member">spy_send</ref>;</highlight></codeline>
<codeline lineno="45" refid="structhal_1_1mock_1_1can_1a63ada3cc887527bae190fd3210f5b7be" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1spy__handler" kindref="compound">spy_handler&lt;bool&gt;</ref><sp/><ref refid="structhal_1_1mock_1_1can_1a63ada3cc887527bae190fd3210f5b7be" kindref="member">spy_bus_on</ref>;</highlight></codeline>
<codeline lineno="47" refid="structhal_1_1mock_1_1can_1a12e65e48951bd4a2b7f8b5020d1fe6fe" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classhal_1_1spy__handler" kindref="compound">spy_handler&lt;hal::callback&lt;handler&gt;</ref>&gt;<sp/><ref refid="structhal_1_1mock_1_1can_1a12e65e48951bd4a2b7f8b5020d1fe6fe" kindref="member">spy_on_receive</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>status<sp/>driver_configure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1can_1_1settings" kindref="compound">settings</ref>&amp;<sp/>p_settings)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="51"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1mock_1_1can_1abef117a5a5ff0bfc7ee313814b015eb1" kindref="member">spy_configure</ref>.<ref refid="classhal_1_1spy__handler_1ab2ed5f0197c8aa76f896815225779b0a" kindref="member">record</ref>(p_settings);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>status<sp/>driver_bus_on()</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="56"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1mock_1_1can_1a63ada3cc887527bae190fd3210f5b7be" kindref="member">spy_bus_on</ref>.<ref refid="classhal_1_1spy__handler_1ab2ed5f0197c8aa76f896815225779b0a" kindref="member">record</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>result&lt;send_t&gt;<sp/>driver_send(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>message_t&amp;<sp/>p_message)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="61"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_CHECK(<ref refid="structhal_1_1mock_1_1can_1a4c2d5472b8ed609ee459e062c43945e1" kindref="member">spy_send</ref>.<ref refid="classhal_1_1spy__handler_1ab2ed5f0197c8aa76f896815225779b0a" kindref="member">record</ref>(p_message));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>send_t{};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>driver_on_receive(hal::callback&lt;handler&gt;<sp/>p_handler)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="67"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<ref refid="structhal_1_1mock_1_1can_1a12e65e48951bd4a2b7f8b5020d1fe6fe" kindref="member">spy_on_receive</ref>.<ref refid="classhal_1_1spy__handler_1ab2ed5f0197c8aa76f896815225779b0a" kindref="member">record</ref>(p_handler);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal">};</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hal::mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">std::basic_ostream&lt;CharT,<sp/>Traits&gt;&amp;<sp/>operator&lt;&lt;(</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>std::basic_ostream&lt;CharT,<sp/>Traits&gt;&amp;<sp/>p_ostream,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1can_1_1message__t" kindref="compound">hal::can::message_t</ref>&amp;<sp/>p_message)</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>p_ostream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{<sp/>id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p_message.<ref refid="structhal_1_1can_1_1message__t_1a7d33139d3c5f9b10d31ee7c809b0d6cf" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>p_ostream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>length:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">{<sp/>p_message.<ref refid="structhal_1_1can_1_1message__t_1a2c66f4827afe85cb1db5d9894666e70a" kindref="member">length</ref><sp/>};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>p_ostream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>is_remote_request:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p_message.<ref refid="structhal_1_1can_1_1message__t_1acb62ec09361d220eb9de285498298baf" kindref="member">is_remote_request</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>p_ostream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>payload<sp/>=<sp/>[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>element<sp/>:<sp/>p_message.<ref refid="structhal_1_1can_1_1message__t_1a69041bbe8912dcc037acac5f9402071e" kindref="member">payload</ref>)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>p_ostream<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">{<sp/>element<sp/>}<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>p_ostream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_ostream;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="libraries/include/libhal-mock/can.hpp"/>
  </compounddef>
</doxygen>
