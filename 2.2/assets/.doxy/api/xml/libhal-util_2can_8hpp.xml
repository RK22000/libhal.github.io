<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="libhal-util_2can_8hpp" kind="file" language="C++">
    <compoundname>can.hpp</compoundname>
    <includes local="no">cmath</includes>
    <includes refid="libhal_2can_8hpp" local="no">libhal/can.hpp</includes>
    <includes refid="comparison_8hpp" local="yes">comparison.hpp</includes>
    <includes refid="math_8hpp" local="yes">math.hpp</includes>
    <incdepgraph>
      <node id="7">
        <label>system_error</label>
      </node>
      <node id="19">
        <label>limits</label>
      </node>
      <node id="14">
        <label>comparison.hpp</label>
        <link refid="comparison_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cstdint</label>
      </node>
      <node id="11">
        <label>tl/function_ref.hpp</label>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="17">
        <label>math.hpp</label>
        <link refid="math_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>boost/leaf/detail/all.hpp</label>
      </node>
      <node id="1">
        <label>libraries/include/libhal-util/can.hpp</label>
        <link refid="libhal-util_2can_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>third_party/inplace_function.hpp</label>
      </node>
      <node id="9">
        <label>functional.hpp</label>
        <link refid="functional_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>units.hpp</label>
        <link refid="libhal_2units_8hpp_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>array</label>
      </node>
      <node id="6">
        <label>error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>chrono</label>
      </node>
      <node id="18">
        <label>concepts</label>
      </node>
      <node id="16">
        <label>span</label>
      </node>
      <node id="15">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>libhal/can.hpp</label>
        <link refid="libhal_2can_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacehal">hal</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2023<sp/>Google<sp/>LLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libhal/can.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;comparison.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="math_8hpp" kindref="compound">math.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehal" kindref="compound">hal</ref><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>can::settings&amp;<sp/>p_lhs,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>can::settings&amp;<sp/>p_rhs)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehal_1a672dc7a38be09e228336cb3e7db942d9" kindref="member">equals</ref>(p_lhs.baud_rate,<sp/>p_rhs.baud_rate)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_lhs.propagation_delay<sp/>==<sp/>p_rhs.propagation_delay<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_lhs.phase_segment1<sp/>==<sp/>p_rhs.phase_segment1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_lhs.phase_segment2<sp/>==<sp/>p_rhs.phase_segment2<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_lhs.synchronization_jump_width<sp/>==<sp/>p_rhs.synchronization_jump_width;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>std::uint16_t<sp/>bit_width(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>can::settings&amp;<sp/>p_settings)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>sum<sp/>of<sp/>4x<sp/>8-bit<sp/>numbers<sp/>can<sp/>never<sp/>exceed<sp/>uint16_t<sp/>and<sp/>thus<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>operation<sp/>is<sp/>always<sp/>safe.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>p_settings.sync_segment<sp/>+<sp/>p_settings.propagation_delay<sp/>+</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>p_settings.phase_segment1<sp/>+<sp/>p_settings.phase_segment2);</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="namespacehal_1a9b15afcc0f9f9a3a92c03fd6dc44a332" refkind="member"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>std::optional&lt;std::uint32_t&gt;<sp/><ref refid="namespacehal_1a9b15afcc0f9f9a3a92c03fd6dc44a332" kindref="member">is_valid</ref>(</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhal_1_1can_1_1settings" kindref="compound">can::settings</ref>&amp;<sp/>p_settings,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="namespacehal_1a54dc271deb8f266e52926836c0582598" kindref="member">hertz</ref><sp/>p_operating_frequency)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>propagation_delay,<sp/>phase_segment1,<sp/>phase_segment2<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>synchronization_jump_width<sp/>must<sp/>be<sp/>nonzero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_settings.<ref refid="structhal_1_1can_1_1settings_1aca58dadf53e8040545250ce375732f06" kindref="member">propagation_delay</ref><sp/>==<sp/>0<sp/>||<sp/>p_settings.<ref refid="structhal_1_1can_1_1settings_1a914dfee9420d24dfb60647af10fae7bc" kindref="member">phase_segment1</ref><sp/>==<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_settings.<ref refid="structhal_1_1can_1_1settings_1adb91231e2f00827b09fccb7a6cdd8221" kindref="member">phase_segment2</ref><sp/>==<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_settings.<ref refid="structhal_1_1can_1_1settings_1a87ab5b9b9e6ff8686cf69d635310a78c" kindref="member">synchronization_jump_width</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>synchronization_jump_width<sp/>must<sp/>be<sp/>the<sp/>lesser<sp/>between<sp/>phase_segment1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>phase_segment2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_settings.<ref refid="structhal_1_1can_1_1settings_1a87ab5b9b9e6ff8686cf69d635310a78c" kindref="member">synchronization_jump_width</ref><sp/>&gt;<sp/>4<sp/>||</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_settings.<ref refid="structhal_1_1can_1_1settings_1a87ab5b9b9e6ff8686cf69d635310a78c" kindref="member">synchronization_jump_width</ref><sp/>&gt;<sp/>p_settings.<ref refid="structhal_1_1can_1_1settings_1a914dfee9420d24dfb60647af10fae7bc" kindref="member">phase_segment1</ref><sp/>||</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_settings.<ref refid="structhal_1_1can_1_1settings_1a87ab5b9b9e6ff8686cf69d635310a78c" kindref="member">synchronization_jump_width</ref><sp/>&gt;<sp/>p_settings.<ref refid="structhal_1_1can_1_1settings_1adb91231e2f00827b09fccb7a6cdd8221" kindref="member">phase_segment2</ref>)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uint16_t<sp/>bit_width_v<sp/>=<sp/>bit_width(p_settings);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>3.<sp/>The<sp/>total<sp/>bit<sp/>width<sp/>must<sp/>be<sp/>equal<sp/>to<sp/>or<sp/>greater<sp/>than<sp/>8<sp/>Tq/bit;<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>sum<sp/>of<sp/>sync_segment,<sp/>propagation_delay,<sp/>phase_segment1<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>phase_segment2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_width_v<sp/>&lt;<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>4.<sp/>The<sp/>CAN<sp/>device&apos;s<sp/>operating<sp/>frequency<sp/>must<sp/>be<sp/>at<sp/>least<sp/>8<sp/>times<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>bit<sp/>rate<sp/>to<sp/>give<sp/>the<sp/>minimum.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>5.<sp/>The<sp/>ratio<sp/>between<sp/>the<sp/>CAN<sp/>device&apos;s<sp/>operating<sp/>frequency<sp/>and<sp/>the<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>width<sp/>must<sp/>be<sp/>close<sp/>enough<sp/>to<sp/>an<sp/>integer<sp/>to<sp/>produce<sp/>a<sp/>usable<sp/>BRP.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bit_width_float<sp/>=<sp/>bit_width_v;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scaled_baud<sp/>=<sp/>p_settings.<ref refid="structhal_1_1can_1_1settings_1aae1f0328aa8c987b80bec57c5aa4f19d" kindref="member">baud_rate</ref><sp/>*<sp/>bit_width_float;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>baud_rate_prescaler<sp/>=<sp/>p_operating_frequency<sp/>/<sp/>scaled_baud;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>final_prescaler<sp/>=<sp/>std::lround(baud_rate_prescaler);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(final_prescaler<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>final_prescaler;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>can::message_t&amp;<sp/>p_lhs,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>can::message_t&amp;<sp/>p_rhs)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>payload_equal<sp/>=<sp/>p_lhs.payload<sp/>==<sp/>p_rhs.payload;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>payload_equal<sp/>&amp;&amp;<sp/>p_lhs.id<sp/>==<sp/>p_rhs.id<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_lhs.length<sp/>==<sp/>p_rhs.length<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_lhs.is_remote_request<sp/>==<sp/>p_rhs.is_remote_request;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hal</highlight></codeline>
    </programlisting>
    <location file="libraries/include/libhal-util/can.hpp"/>
  </compounddef>
</doxygen>
